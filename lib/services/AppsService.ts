/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from "../core/CancelablePromise";
import { ApiService } from "../core/ApiService";
import { request as __request } from "../core/request";

export class AppsService extends ApiService {
  /**
   * List All Apps
   * List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.
   * @returns any A JSON object with a `apps` key. This is list of object `apps`.
   * @throws ApiError
   */
  public appsList({
    page = 1,
    perPage = 20,
    withProjects,
  }: {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * Whether the project_id of listed apps should be fetched and included.
     */
    withProjects?: boolean;
  }): CancelablePromise<
    {
      apps?: Array<{
        active_deployment?: {
          cause?: string;
          cloned_from?: string;
          created_at?: string;
          id?: string;
          jobs?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          functions?: Array<{
            name?: string;
            /**
             * The commit hash of the repository that was used to build this functions component.
             */
            source_commit_hash?: string;
            /**
             * The namespace where the functions are deployed.
             */
            namespace?: string;
          }>;
          phase?:
            | "UNKNOWN"
            | "PENDING_BUILD"
            | "BUILDING"
            | "PENDING_DEPLOY"
            | "DEPLOYING"
            | "ACTIVE"
            | "SUPERSEDED"
            | "ERROR"
            | "CANCELED";
          phase_last_updated_at?: string;
          progress?: {
            error_steps?: number;
            pending_steps?: number;
            running_steps?: number;
            steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            success_steps?: number;
            summary_steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            total_steps?: number;
          };
          services?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          /**
           * The desired configuration of an application.
           */
          spec?: {
            /**
             * The name of the app. Must be unique across all apps in the same account.
             */
            name: string;
            /**
             * The slug form of the geographical origin of the app. Default: `nearest available`
             */
            region?:
              | "ams"
              | "nyc"
              | "fra"
              | "sfo"
              | "sgp"
              | "blr"
              | "tor"
              | "lon"
              | "syd";
            /**
             * A set of hostnames where the application will be available.
             */
            domains?: Array<{
              /**
               * The hostname for the domain
               */
              domain: string;
              /**
               * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
               * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
               * - ALIAS: A non-primary domain
               */
              type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
              /**
               * Indicates whether the domain includes all sub-domains, in addition to the given domain
               */
              wildcard?: boolean;
              /**
               * Optional. If the domain uses DigitalOcean DNS and you would like App
               * Platform to automatically manage it for you, set this to the name of the
               * domain on your account.
               *
               * For example, If the domain you are adding is `app.domain.com`, the zone
               * could be `domain.com`.
               */
              zone?: string;
              /**
               * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
               */
              minimum_tls_version?: "1.2" | "1.3";
            }>;
            /**
             * Workloads which expose publicly-accessible HTTP services.
             */
            services?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                health_check?: {
                  /**
                   * The number of failed health checks before considered unhealthy.
                   */
                  failure_threshold?: number;
                  /**
                   * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                   */
                  port?: number;
                  /**
                   * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                   */
                  http_path?: string;
                  /**
                   * The number of seconds to wait before beginning health checks.
                   */
                  initial_delay_seconds?: number;
                  /**
                   * The number of seconds to wait between health checks.
                   */
                  period_seconds?: number;
                  /**
                   * The number of successful health checks before considered healthy.
                   */
                  success_threshold?: number;
                  /**
                   * The number of seconds after which the check times out.
                   */
                  timeout_seconds?: number;
                };
                /**
                 * The internal port on which this service's run command will listen. Default: 8080
                 * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
                 */
                http_port?: number;
                /**
                 * The ports on which this service will listen for internal traffic.
                 */
                internal_ports?: Array<number>;
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              }
            >;
            /**
             * Content which can be rendered to web assets.
             */
            static_sites?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The name of the index document to use when serving this site. Default: index.html
                 */
                index_document?: string;
                /**
                 * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
                 */
                error_document?: string;
                /**
                 * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
                 */
                catchall_document?: string;
                /**
                 * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
                 */
                output_dir?: string;
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
             */
            jobs?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
                 * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
                 * - POST_DEPLOY: Indicates a job that runs after an app deployment.
                 * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
                 */
                kind?:
                  | "UNSPECIFIED"
                  | "PRE_DEPLOY"
                  | "POST_DEPLOY"
                  | "FAILED_DEPLOY";
              }
            >;
            /**
             * Workloads which do not expose publicly-accessible HTTP services.
             */
            workers?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Workloads which expose publicly-accessible HTTP services via Functions Components.
             */
            functions?: Array<{
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              alerts?: Array<{
                rule?:
                  | "UNSPECIFIED_RULE"
                  | "CPU_UTILIZATION"
                  | "MEM_UTILIZATION"
                  | "RESTART_COUNT"
                  | "DEPLOYMENT_FAILED"
                  | "DEPLOYMENT_LIVE"
                  | "DOMAIN_FAILED"
                  | "DOMAIN_LIVE"
                  | "FUNCTIONS_ACTIVATION_COUNT"
                  | "FUNCTIONS_AVERAGE_DURATION_MS"
                  | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                  | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                  | "FUNCTIONS_ERROR_COUNT"
                  | "FUNCTIONS_GB_RATE_PER_SECOND";
                /**
                 * Is the alert disabled?
                 */
                disabled?: boolean;
                operator?:
                  | "UNSPECIFIED_OPERATOR"
                  | "GREATER_THAN"
                  | "LESS_THAN";
                /**
                 * Threshold value for alert
                 */
                value?: number;
                window?:
                  | "UNSPECIFIED_WINDOW"
                  | "FIVE_MINUTES"
                  | "TEN_MINUTES"
                  | "THIRTY_MINUTES"
                  | "ONE_HOUR";
              }>;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            }>;
            /**
             * Database instances which can provide persistence to workloads within the
             * application.
             */
            databases?: Array<{
              /**
               * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
               */
              cluster_name?: string;
              /**
               * The name of the MySQL or PostgreSQL database to configure.
               */
              db_name?: string;
              /**
               * The name of the MySQL or PostgreSQL user to configure.
               */
              db_user?: string;
              /**
               * - MYSQL: MySQL
               * - PG: PostgreSQL
               * - REDIS: Redis
               */
              engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * Whether this is a production or dev database.
               */
              production?: boolean;
              /**
               * The version of the database engine
               */
              version?: string;
            }>;
            /**
             * Specification for app ingress configurations.
             */
            ingress?: {
              /**
               * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
               */
              rules?: Array<{
                /**
                 * The match configuration for the rule.
                 */
                match?: {
                  /**
                   * The path to match on.
                   */
                  path: {
                    /**
                     * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                     */
                    prefix: string;
                  };
                };
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * The component to route to. Only one of `component` or `redirect` may be set.
                 */
                component?: {
                  /**
                   * The name of the component to route to.
                   */
                  name: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                   */
                  preserve_path_prefix?: string;
                  /**
                   * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                   */
                  rewrite?: string;
                };
                /**
                 * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
                 */
                redirect?: {
                  /**
                   * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                   */
                  uri?: string;
                  /**
                   * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                   */
                  authority?: string;
                  /**
                   * The port to redirect to.
                   */
                  port?: number;
                  /**
                   * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                   */
                  scheme?: string;
                  /**
                   * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                   */
                  redirect_code?: number;
                };
              }>;
            };
          };
          static_sites?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          readonly tier_slug?: string;
          updated_at?: string;
          workers?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
        };
        readonly created_at?: string;
        readonly default_ingress?: string;
        readonly domains?: Array<{
          id?: string;
          phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
          progress?: {
            steps?: Array<Record<string, any>>;
          };
          spec?: {
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          };
          validations?: Array<any>;
          readonly rotate_validation_records?: boolean;
          readonly certificate_expires_at?: string;
        }>;
        readonly id?: string;
        in_progress_deployment?: {
          cause?: string;
          cloned_from?: string;
          created_at?: string;
          id?: string;
          jobs?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          functions?: Array<{
            name?: string;
            /**
             * The commit hash of the repository that was used to build this functions component.
             */
            source_commit_hash?: string;
            /**
             * The namespace where the functions are deployed.
             */
            namespace?: string;
          }>;
          phase?:
            | "UNKNOWN"
            | "PENDING_BUILD"
            | "BUILDING"
            | "PENDING_DEPLOY"
            | "DEPLOYING"
            | "ACTIVE"
            | "SUPERSEDED"
            | "ERROR"
            | "CANCELED";
          phase_last_updated_at?: string;
          progress?: {
            error_steps?: number;
            pending_steps?: number;
            running_steps?: number;
            steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            success_steps?: number;
            summary_steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            total_steps?: number;
          };
          services?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          /**
           * The desired configuration of an application.
           */
          spec?: {
            /**
             * The name of the app. Must be unique across all apps in the same account.
             */
            name: string;
            /**
             * The slug form of the geographical origin of the app. Default: `nearest available`
             */
            region?:
              | "ams"
              | "nyc"
              | "fra"
              | "sfo"
              | "sgp"
              | "blr"
              | "tor"
              | "lon"
              | "syd";
            /**
             * A set of hostnames where the application will be available.
             */
            domains?: Array<{
              /**
               * The hostname for the domain
               */
              domain: string;
              /**
               * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
               * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
               * - ALIAS: A non-primary domain
               */
              type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
              /**
               * Indicates whether the domain includes all sub-domains, in addition to the given domain
               */
              wildcard?: boolean;
              /**
               * Optional. If the domain uses DigitalOcean DNS and you would like App
               * Platform to automatically manage it for you, set this to the name of the
               * domain on your account.
               *
               * For example, If the domain you are adding is `app.domain.com`, the zone
               * could be `domain.com`.
               */
              zone?: string;
              /**
               * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
               */
              minimum_tls_version?: "1.2" | "1.3";
            }>;
            /**
             * Workloads which expose publicly-accessible HTTP services.
             */
            services?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                health_check?: {
                  /**
                   * The number of failed health checks before considered unhealthy.
                   */
                  failure_threshold?: number;
                  /**
                   * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                   */
                  port?: number;
                  /**
                   * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                   */
                  http_path?: string;
                  /**
                   * The number of seconds to wait before beginning health checks.
                   */
                  initial_delay_seconds?: number;
                  /**
                   * The number of seconds to wait between health checks.
                   */
                  period_seconds?: number;
                  /**
                   * The number of successful health checks before considered healthy.
                   */
                  success_threshold?: number;
                  /**
                   * The number of seconds after which the check times out.
                   */
                  timeout_seconds?: number;
                };
                /**
                 * The internal port on which this service's run command will listen. Default: 8080
                 * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
                 */
                http_port?: number;
                /**
                 * The ports on which this service will listen for internal traffic.
                 */
                internal_ports?: Array<number>;
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              }
            >;
            /**
             * Content which can be rendered to web assets.
             */
            static_sites?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The name of the index document to use when serving this site. Default: index.html
                 */
                index_document?: string;
                /**
                 * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
                 */
                error_document?: string;
                /**
                 * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
                 */
                catchall_document?: string;
                /**
                 * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
                 */
                output_dir?: string;
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
             */
            jobs?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
                 * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
                 * - POST_DEPLOY: Indicates a job that runs after an app deployment.
                 * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
                 */
                kind?:
                  | "UNSPECIFIED"
                  | "PRE_DEPLOY"
                  | "POST_DEPLOY"
                  | "FAILED_DEPLOY";
              }
            >;
            /**
             * Workloads which do not expose publicly-accessible HTTP services.
             */
            workers?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Workloads which expose publicly-accessible HTTP services via Functions Components.
             */
            functions?: Array<{
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              alerts?: Array<{
                rule?:
                  | "UNSPECIFIED_RULE"
                  | "CPU_UTILIZATION"
                  | "MEM_UTILIZATION"
                  | "RESTART_COUNT"
                  | "DEPLOYMENT_FAILED"
                  | "DEPLOYMENT_LIVE"
                  | "DOMAIN_FAILED"
                  | "DOMAIN_LIVE"
                  | "FUNCTIONS_ACTIVATION_COUNT"
                  | "FUNCTIONS_AVERAGE_DURATION_MS"
                  | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                  | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                  | "FUNCTIONS_ERROR_COUNT"
                  | "FUNCTIONS_GB_RATE_PER_SECOND";
                /**
                 * Is the alert disabled?
                 */
                disabled?: boolean;
                operator?:
                  | "UNSPECIFIED_OPERATOR"
                  | "GREATER_THAN"
                  | "LESS_THAN";
                /**
                 * Threshold value for alert
                 */
                value?: number;
                window?:
                  | "UNSPECIFIED_WINDOW"
                  | "FIVE_MINUTES"
                  | "TEN_MINUTES"
                  | "THIRTY_MINUTES"
                  | "ONE_HOUR";
              }>;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            }>;
            /**
             * Database instances which can provide persistence to workloads within the
             * application.
             */
            databases?: Array<{
              /**
               * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
               */
              cluster_name?: string;
              /**
               * The name of the MySQL or PostgreSQL database to configure.
               */
              db_name?: string;
              /**
               * The name of the MySQL or PostgreSQL user to configure.
               */
              db_user?: string;
              /**
               * - MYSQL: MySQL
               * - PG: PostgreSQL
               * - REDIS: Redis
               */
              engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * Whether this is a production or dev database.
               */
              production?: boolean;
              /**
               * The version of the database engine
               */
              version?: string;
            }>;
            /**
             * Specification for app ingress configurations.
             */
            ingress?: {
              /**
               * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
               */
              rules?: Array<{
                /**
                 * The match configuration for the rule.
                 */
                match?: {
                  /**
                   * The path to match on.
                   */
                  path: {
                    /**
                     * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                     */
                    prefix: string;
                  };
                };
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * The component to route to. Only one of `component` or `redirect` may be set.
                 */
                component?: {
                  /**
                   * The name of the component to route to.
                   */
                  name: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                   */
                  preserve_path_prefix?: string;
                  /**
                   * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                   */
                  rewrite?: string;
                };
                /**
                 * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
                 */
                redirect?: {
                  /**
                   * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                   */
                  uri?: string;
                  /**
                   * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                   */
                  authority?: string;
                  /**
                   * The port to redirect to.
                   */
                  port?: number;
                  /**
                   * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                   */
                  scheme?: string;
                  /**
                   * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                   */
                  redirect_code?: number;
                };
              }>;
            };
          };
          static_sites?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          readonly tier_slug?: string;
          updated_at?: string;
          workers?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
        };
        readonly last_deployment_created_at?: string;
        readonly live_domain?: string;
        readonly live_url?: string;
        readonly live_url_base?: string;
        readonly owner_uuid?: string;
        pending_deployment?: {
          cause?: string;
          cloned_from?: string;
          created_at?: string;
          id?: string;
          jobs?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          functions?: Array<{
            name?: string;
            /**
             * The commit hash of the repository that was used to build this functions component.
             */
            source_commit_hash?: string;
            /**
             * The namespace where the functions are deployed.
             */
            namespace?: string;
          }>;
          phase?:
            | "UNKNOWN"
            | "PENDING_BUILD"
            | "BUILDING"
            | "PENDING_DEPLOY"
            | "DEPLOYING"
            | "ACTIVE"
            | "SUPERSEDED"
            | "ERROR"
            | "CANCELED";
          phase_last_updated_at?: string;
          progress?: {
            error_steps?: number;
            pending_steps?: number;
            running_steps?: number;
            steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            success_steps?: number;
            summary_steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            total_steps?: number;
          };
          services?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          /**
           * The desired configuration of an application.
           */
          spec?: {
            /**
             * The name of the app. Must be unique across all apps in the same account.
             */
            name: string;
            /**
             * The slug form of the geographical origin of the app. Default: `nearest available`
             */
            region?:
              | "ams"
              | "nyc"
              | "fra"
              | "sfo"
              | "sgp"
              | "blr"
              | "tor"
              | "lon"
              | "syd";
            /**
             * A set of hostnames where the application will be available.
             */
            domains?: Array<{
              /**
               * The hostname for the domain
               */
              domain: string;
              /**
               * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
               * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
               * - ALIAS: A non-primary domain
               */
              type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
              /**
               * Indicates whether the domain includes all sub-domains, in addition to the given domain
               */
              wildcard?: boolean;
              /**
               * Optional. If the domain uses DigitalOcean DNS and you would like App
               * Platform to automatically manage it for you, set this to the name of the
               * domain on your account.
               *
               * For example, If the domain you are adding is `app.domain.com`, the zone
               * could be `domain.com`.
               */
              zone?: string;
              /**
               * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
               */
              minimum_tls_version?: "1.2" | "1.3";
            }>;
            /**
             * Workloads which expose publicly-accessible HTTP services.
             */
            services?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                health_check?: {
                  /**
                   * The number of failed health checks before considered unhealthy.
                   */
                  failure_threshold?: number;
                  /**
                   * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                   */
                  port?: number;
                  /**
                   * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                   */
                  http_path?: string;
                  /**
                   * The number of seconds to wait before beginning health checks.
                   */
                  initial_delay_seconds?: number;
                  /**
                   * The number of seconds to wait between health checks.
                   */
                  period_seconds?: number;
                  /**
                   * The number of successful health checks before considered healthy.
                   */
                  success_threshold?: number;
                  /**
                   * The number of seconds after which the check times out.
                   */
                  timeout_seconds?: number;
                };
                /**
                 * The internal port on which this service's run command will listen. Default: 8080
                 * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
                 */
                http_port?: number;
                /**
                 * The ports on which this service will listen for internal traffic.
                 */
                internal_ports?: Array<number>;
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              }
            >;
            /**
             * Content which can be rendered to web assets.
             */
            static_sites?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The name of the index document to use when serving this site. Default: index.html
                 */
                index_document?: string;
                /**
                 * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
                 */
                error_document?: string;
                /**
                 * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
                 */
                catchall_document?: string;
                /**
                 * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
                 */
                output_dir?: string;
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
             */
            jobs?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
                 * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
                 * - POST_DEPLOY: Indicates a job that runs after an app deployment.
                 * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
                 */
                kind?:
                  | "UNSPECIFIED"
                  | "PRE_DEPLOY"
                  | "POST_DEPLOY"
                  | "FAILED_DEPLOY";
              }
            >;
            /**
             * Workloads which do not expose publicly-accessible HTTP services.
             */
            workers?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Workloads which expose publicly-accessible HTTP services via Functions Components.
             */
            functions?: Array<{
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              alerts?: Array<{
                rule?:
                  | "UNSPECIFIED_RULE"
                  | "CPU_UTILIZATION"
                  | "MEM_UTILIZATION"
                  | "RESTART_COUNT"
                  | "DEPLOYMENT_FAILED"
                  | "DEPLOYMENT_LIVE"
                  | "DOMAIN_FAILED"
                  | "DOMAIN_LIVE"
                  | "FUNCTIONS_ACTIVATION_COUNT"
                  | "FUNCTIONS_AVERAGE_DURATION_MS"
                  | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                  | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                  | "FUNCTIONS_ERROR_COUNT"
                  | "FUNCTIONS_GB_RATE_PER_SECOND";
                /**
                 * Is the alert disabled?
                 */
                disabled?: boolean;
                operator?:
                  | "UNSPECIFIED_OPERATOR"
                  | "GREATER_THAN"
                  | "LESS_THAN";
                /**
                 * Threshold value for alert
                 */
                value?: number;
                window?:
                  | "UNSPECIFIED_WINDOW"
                  | "FIVE_MINUTES"
                  | "TEN_MINUTES"
                  | "THIRTY_MINUTES"
                  | "ONE_HOUR";
              }>;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            }>;
            /**
             * Database instances which can provide persistence to workloads within the
             * application.
             */
            databases?: Array<{
              /**
               * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
               */
              cluster_name?: string;
              /**
               * The name of the MySQL or PostgreSQL database to configure.
               */
              db_name?: string;
              /**
               * The name of the MySQL or PostgreSQL user to configure.
               */
              db_user?: string;
              /**
               * - MYSQL: MySQL
               * - PG: PostgreSQL
               * - REDIS: Redis
               */
              engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * Whether this is a production or dev database.
               */
              production?: boolean;
              /**
               * The version of the database engine
               */
              version?: string;
            }>;
            /**
             * Specification for app ingress configurations.
             */
            ingress?: {
              /**
               * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
               */
              rules?: Array<{
                /**
                 * The match configuration for the rule.
                 */
                match?: {
                  /**
                   * The path to match on.
                   */
                  path: {
                    /**
                     * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                     */
                    prefix: string;
                  };
                };
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * The component to route to. Only one of `component` or `redirect` may be set.
                 */
                component?: {
                  /**
                   * The name of the component to route to.
                   */
                  name: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                   */
                  preserve_path_prefix?: string;
                  /**
                   * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                   */
                  rewrite?: string;
                };
                /**
                 * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
                 */
                redirect?: {
                  /**
                   * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                   */
                  uri?: string;
                  /**
                   * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                   */
                  authority?: string;
                  /**
                   * The port to redirect to.
                   */
                  port?: number;
                  /**
                   * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                   */
                  scheme?: string;
                  /**
                   * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                   */
                  redirect_code?: number;
                };
              }>;
            };
          };
          static_sites?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          readonly tier_slug?: string;
          updated_at?: string;
          workers?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
        };
        readonly project_id?: string;
        region?: {
          readonly continent?: string;
          readonly data_centers?: Array<string>;
          /**
           * Whether or not the region is presented as the default.
           */
          readonly default?: boolean;
          readonly disabled?: boolean;
          readonly flag?: string;
          readonly label?: string;
          readonly reason?: string;
          readonly slug?: string;
        };
        /**
         * The desired configuration of an application.
         */
        spec: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        readonly tier_slug?: string;
        readonly updated_at?: string;
        pinned_deployment?: {
          cause?: string;
          cloned_from?: string;
          created_at?: string;
          id?: string;
          jobs?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          functions?: Array<{
            name?: string;
            /**
             * The commit hash of the repository that was used to build this functions component.
             */
            source_commit_hash?: string;
            /**
             * The namespace where the functions are deployed.
             */
            namespace?: string;
          }>;
          phase?:
            | "UNKNOWN"
            | "PENDING_BUILD"
            | "BUILDING"
            | "PENDING_DEPLOY"
            | "DEPLOYING"
            | "ACTIVE"
            | "SUPERSEDED"
            | "ERROR"
            | "CANCELED";
          phase_last_updated_at?: string;
          progress?: {
            error_steps?: number;
            pending_steps?: number;
            running_steps?: number;
            steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            success_steps?: number;
            summary_steps?: Array<{
              component_name?: string;
              ended_at?: string;
              /**
               * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
               *
               * `message_base` = "Building service"
               * `component_name` = "api"
               */
              message_base?: string;
              name?: string;
              reason?: {
                code?: string;
                message?: string;
              };
              started_at?: string;
              status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
              steps?: Array<Record<string, any>>;
            }>;
            total_steps?: number;
          };
          services?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          /**
           * The desired configuration of an application.
           */
          spec?: {
            /**
             * The name of the app. Must be unique across all apps in the same account.
             */
            name: string;
            /**
             * The slug form of the geographical origin of the app. Default: `nearest available`
             */
            region?:
              | "ams"
              | "nyc"
              | "fra"
              | "sfo"
              | "sgp"
              | "blr"
              | "tor"
              | "lon"
              | "syd";
            /**
             * A set of hostnames where the application will be available.
             */
            domains?: Array<{
              /**
               * The hostname for the domain
               */
              domain: string;
              /**
               * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
               * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
               * - ALIAS: A non-primary domain
               */
              type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
              /**
               * Indicates whether the domain includes all sub-domains, in addition to the given domain
               */
              wildcard?: boolean;
              /**
               * Optional. If the domain uses DigitalOcean DNS and you would like App
               * Platform to automatically manage it for you, set this to the name of the
               * domain on your account.
               *
               * For example, If the domain you are adding is `app.domain.com`, the zone
               * could be `domain.com`.
               */
              zone?: string;
              /**
               * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
               */
              minimum_tls_version?: "1.2" | "1.3";
            }>;
            /**
             * Workloads which expose publicly-accessible HTTP services.
             */
            services?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                health_check?: {
                  /**
                   * The number of failed health checks before considered unhealthy.
                   */
                  failure_threshold?: number;
                  /**
                   * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                   */
                  port?: number;
                  /**
                   * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                   */
                  http_path?: string;
                  /**
                   * The number of seconds to wait before beginning health checks.
                   */
                  initial_delay_seconds?: number;
                  /**
                   * The number of seconds to wait between health checks.
                   */
                  period_seconds?: number;
                  /**
                   * The number of successful health checks before considered healthy.
                   */
                  success_threshold?: number;
                  /**
                   * The number of seconds after which the check times out.
                   */
                  timeout_seconds?: number;
                };
                /**
                 * The internal port on which this service's run command will listen. Default: 8080
                 * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
                 */
                http_port?: number;
                /**
                 * The ports on which this service will listen for internal traffic.
                 */
                internal_ports?: Array<number>;
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              }
            >;
            /**
             * Content which can be rendered to web assets.
             */
            static_sites?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The name of the index document to use when serving this site. Default: index.html
                 */
                index_document?: string;
                /**
                 * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
                 */
                error_document?: string;
                /**
                 * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
                 */
                catchall_document?: string;
                /**
                 * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
                 */
                output_dir?: string;
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
                 * @deprecated
                 */
                routes?: Array<{
                  /**
                   * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                   */
                  path?: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                   */
                  preserve_path_prefix?: boolean;
                }>;
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
             */
            jobs?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
                 * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
                 * - POST_DEPLOY: Indicates a job that runs after an app deployment.
                 * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
                 */
                kind?:
                  | "UNSPECIFIED"
                  | "PRE_DEPLOY"
                  | "POST_DEPLOY"
                  | "FAILED_DEPLOY";
              }
            >;
            /**
             * Workloads which do not expose publicly-accessible HTTP services.
             */
            workers?: Array<
              {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name?: string;
                git?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                   */
                  repo_clone_url?: string;
                };
                github?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                gitlab?: {
                  /**
                   * The name of the branch to use
                   */
                  branch?: string;
                  /**
                   * Whether to automatically deploy new commits made to the repo
                   */
                  deploy_on_push?: boolean;
                  /**
                   * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                   */
                  repo?: string;
                };
                image?: {
                  /**
                   * The registry name. Must be left empty for the `DOCR` registry type.
                   */
                  registry?: string;
                  /**
                   * - DOCKER_HUB: The DockerHub container registry type.
                   * - DOCR: The DigitalOcean container registry type.
                   * - GHCR: The Github container registry type.
                   */
                  registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                  /**
                   * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                   * - "$username:$access_token" for registries of type `GHCR`.
                   */
                  registry_credentials?: string;
                  /**
                   * The repository name.
                   */
                  repository?: string;
                  /**
                   * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                   */
                  tag?: string;
                  /**
                   * The image digest. Cannot be specified if tag is provided.
                   */
                  digest?: string;
                  deploy_on_push?: {
                    /**
                     * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                     */
                    enabled?: boolean;
                  };
                };
                /**
                 * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
                 */
                dockerfile_path?: string;
                /**
                 * An optional build command to run while building this component from source.
                 */
                build_command?: string;
                /**
                 * An optional run command to override the component's default.
                 */
                run_command?: string;
                /**
                 * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
                 */
                source_dir?: string;
                /**
                 * A list of environment variables made available to the component.
                 */
                envs?: Array<{
                  /**
                   * The variable name
                   */
                  key: string;
                  /**
                   * - RUN_TIME: Made available only at run-time
                   * - BUILD_TIME: Made available only at build-time
                   * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                   */
                  scope?:
                    | "UNSET"
                    | "RUN_TIME"
                    | "BUILD_TIME"
                    | "RUN_AND_BUILD_TIME";
                  /**
                   * - GENERAL: A plain-text environment variable
                   * - SECRET: A secret encrypted environment variable
                   */
                  type?: "GENERAL" | "SECRET";
                  /**
                   * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                   */
                  value?: string;
                }>;
                /**
                 * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
                 */
                environment_slug?: string;
                log_destinations?: {
                  name: string;
                  /**
                   * Papertrail configuration.
                   */
                  papertrail?: {
                    /**
                     * Papertrail syslog endpoint.
                     */
                    endpoint: string;
                  };
                  /**
                   * DataDog configuration.
                   */
                  datadog?: {
                    /**
                     * Datadog HTTP log intake endpoint.
                     */
                    endpoint?: string;
                    /**
                     * Datadog API key.
                     */
                    api_key: string;
                  };
                  /**
                   * Logtail configuration.
                   */
                  logtail?: {
                    /**
                     * Logtail token.
                     */
                    token?: string;
                  };
                };
              } & {
                /**
                 * The amount of instances that this component should be scaled to. Default: 1
                 */
                instance_count?: number;
                /**
                 * The instance size to use for this component. Default: `basic-xxs`
                 */
                instance_size_slug?:
                  | "basic-xxs"
                  | "basic-xs"
                  | "basic-s"
                  | "basic-m"
                  | "professional-xs"
                  | "professional-s"
                  | "professional-m"
                  | "professional-1l"
                  | "professional-l"
                  | "professional-xl";
              } & {
                /**
                 * The name. Must be unique across all components within the same app.
                 */
                name: string;
              }
            >;
            /**
             * Workloads which expose publicly-accessible HTTP services via Functions Components.
             */
            functions?: Array<{
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              alerts?: Array<{
                rule?:
                  | "UNSPECIFIED_RULE"
                  | "CPU_UTILIZATION"
                  | "MEM_UTILIZATION"
                  | "RESTART_COUNT"
                  | "DEPLOYMENT_FAILED"
                  | "DEPLOYMENT_LIVE"
                  | "DOMAIN_FAILED"
                  | "DOMAIN_LIVE"
                  | "FUNCTIONS_ACTIVATION_COUNT"
                  | "FUNCTIONS_AVERAGE_DURATION_MS"
                  | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                  | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                  | "FUNCTIONS_ERROR_COUNT"
                  | "FUNCTIONS_GB_RATE_PER_SECOND";
                /**
                 * Is the alert disabled?
                 */
                disabled?: boolean;
                operator?:
                  | "UNSPECIFIED_OPERATOR"
                  | "GREATER_THAN"
                  | "LESS_THAN";
                /**
                 * Threshold value for alert
                 */
                value?: number;
                window?:
                  | "UNSPECIFIED_WINDOW"
                  | "FIVE_MINUTES"
                  | "TEN_MINUTES"
                  | "THIRTY_MINUTES"
                  | "ONE_HOUR";
              }>;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            }>;
            /**
             * Database instances which can provide persistence to workloads within the
             * application.
             */
            databases?: Array<{
              /**
               * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
               */
              cluster_name?: string;
              /**
               * The name of the MySQL or PostgreSQL database to configure.
               */
              db_name?: string;
              /**
               * The name of the MySQL or PostgreSQL user to configure.
               */
              db_user?: string;
              /**
               * - MYSQL: MySQL
               * - PG: PostgreSQL
               * - REDIS: Redis
               */
              engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
              /**
               * Whether this is a production or dev database.
               */
              production?: boolean;
              /**
               * The version of the database engine
               */
              version?: string;
            }>;
            /**
             * Specification for app ingress configurations.
             */
            ingress?: {
              /**
               * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
               */
              rules?: Array<{
                /**
                 * The match configuration for the rule.
                 */
                match?: {
                  /**
                   * The path to match on.
                   */
                  path: {
                    /**
                     * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                     */
                    prefix: string;
                  };
                };
                cors?: {
                  /**
                   * The set of allowed CORS origins.
                   */
                  allow_origins?: Array<{
                    /**
                     * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    exact?: string;
                    /**
                     * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                     */
                    prefix?: string;
                    /**
                     * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                     */
                    regex?: string;
                  }>;
                  /**
                   * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                   */
                  allow_methods?: Array<string>;
                  /**
                   * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                   */
                  allow_headers?: Array<string>;
                  /**
                   * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                   */
                  expose_headers?: Array<string>;
                  /**
                   * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                   */
                  max_age?: string;
                  /**
                   * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                   */
                  allow_credentials?: boolean;
                };
                /**
                 * The component to route to. Only one of `component` or `redirect` may be set.
                 */
                component?: {
                  /**
                   * The name of the component to route to.
                   */
                  name: string;
                  /**
                   * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                   */
                  preserve_path_prefix?: string;
                  /**
                   * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                   */
                  rewrite?: string;
                };
                /**
                 * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
                 */
                redirect?: {
                  /**
                   * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                   */
                  uri?: string;
                  /**
                   * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                   */
                  authority?: string;
                  /**
                   * The port to redirect to.
                   */
                  port?: number;
                  /**
                   * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                   */
                  scheme?: string;
                  /**
                   * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                   */
                  redirect_code?: number;
                };
              }>;
            };
          };
          static_sites?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
          readonly tier_slug?: string;
          updated_at?: string;
          workers?: Array<{
            name?: string;
            source_commit_hash?: string;
          }>;
        };
      }>;
    } & {
      links?: {
        pages?:
          | ({
              /**
               * URI of the last page of the results.
               */
              last?: string;
            } & {
              /**
               * URI of the next page of the results.
               */
              next?: string;
            })
          | ({
              /**
               * URI of the first page of the results.
               */
              first?: string;
            } & {
              /**
               * URI of the previous page of the results.
               */
              prev?: string;
            });
      };
    } & {
      meta: {
        /**
         * Number of objects returned by the request.
         */
        total?: number;
      };
    }
  > {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps",
      query: {
        page: page,
        per_page: perPage,
        with_projects: withProjects,
      },
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Create a New App
   * Create a new app by submitting an app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
   * @returns any A JSON or YAML of a `spec` object.
   * @throws ApiError
   */
  public appsCreate({
    requestBody,
    accept,
    contentType,
  }: {
    requestBody: {
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      /**
       * The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
       */
      project_id?: string;
    };
    /**
     * The content-type that should be used by the response. By default, the response will be `application/json`. `application/yaml` is also supported.
     */
    accept?: "application/json" | "application/yaml";
    /**
     * The content-type used for the request. By default, the requests are assumed to use `application/json`. `application/yaml` is also supported.
     */
    contentType?: "application/json" | "application/yaml";
  }): CancelablePromise<{
    /**
     * An application's configuration and status.
     */
    app?: {
      active_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly created_at?: string;
      readonly default_ingress?: string;
      readonly domains?: Array<{
        id?: string;
        phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
        progress?: {
          steps?: Array<Record<string, any>>;
        };
        spec?: {
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        };
        validations?: Array<any>;
        readonly rotate_validation_records?: boolean;
        readonly certificate_expires_at?: string;
      }>;
      readonly id?: string;
      in_progress_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly last_deployment_created_at?: string;
      readonly live_domain?: string;
      readonly live_url?: string;
      readonly live_url_base?: string;
      readonly owner_uuid?: string;
      pending_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly project_id?: string;
      region?: {
        readonly continent?: string;
        readonly data_centers?: Array<string>;
        /**
         * Whether or not the region is presented as the default.
         */
        readonly default?: boolean;
        readonly disabled?: boolean;
        readonly flag?: string;
        readonly label?: string;
        readonly reason?: string;
        readonly slug?: string;
      };
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      readonly tier_slug?: string;
      readonly updated_at?: string;
      pinned_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps",
      headers: {
        Accept: accept,
        "Content-Type": contentType,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Delete an App
   * Delete an existing app. Once deleted, all active deployments will be permanently shut down and the app deleted. If needed, be sure to back up your app specification so that you may re-create it at a later time.
   * @returns any the ID of the app deleted.
   * @throws ApiError
   */
  public appsDelete({
    id,
  }: {
    /**
     * The ID of the app
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
  }> {
    return __request(this.client, {
      method: "DELETE",
      url: "/v2/apps/{id}",
      path: {
        id: id,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve an Existing App
   * Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.
   * @returns any A JSON with key `app`
   * @throws ApiError
   */
  public appsGet({
    id,
    name,
  }: {
    /**
     * The ID of the app
     */
    id: string;
    /**
     * The name of the app to retrieve.
     */
    name?: string;
  }): CancelablePromise<{
    /**
     * An application's configuration and status.
     */
    app?: {
      active_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly created_at?: string;
      readonly default_ingress?: string;
      readonly domains?: Array<{
        id?: string;
        phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
        progress?: {
          steps?: Array<Record<string, any>>;
        };
        spec?: {
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        };
        validations?: Array<any>;
        readonly rotate_validation_records?: boolean;
        readonly certificate_expires_at?: string;
      }>;
      readonly id?: string;
      in_progress_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly last_deployment_created_at?: string;
      readonly live_domain?: string;
      readonly live_url?: string;
      readonly live_url_base?: string;
      readonly owner_uuid?: string;
      pending_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly project_id?: string;
      region?: {
        readonly continent?: string;
        readonly data_centers?: Array<string>;
        /**
         * Whether or not the region is presented as the default.
         */
        readonly default?: boolean;
        readonly disabled?: boolean;
        readonly flag?: string;
        readonly label?: string;
        readonly reason?: string;
        readonly slug?: string;
      };
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      readonly tier_slug?: string;
      readonly updated_at?: string;
      pinned_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
    };
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{id}",
      path: {
        id: id,
      },
      query: {
        name: name,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Update an App
   * Update an existing app by submitting a new app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
   * @returns any A JSON object of the updated `app`
   * @throws ApiError
   */
  public appsUpdate({
    id,
    requestBody,
  }: {
    /**
     * The ID of the app
     */
    id: string;
    requestBody: {
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
    };
  }): CancelablePromise<{
    /**
     * An application's configuration and status.
     */
    app?: {
      active_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly created_at?: string;
      readonly default_ingress?: string;
      readonly domains?: Array<{
        id?: string;
        phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
        progress?: {
          steps?: Array<Record<string, any>>;
        };
        spec?: {
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        };
        validations?: Array<any>;
        readonly rotate_validation_records?: boolean;
        readonly certificate_expires_at?: string;
      }>;
      readonly id?: string;
      in_progress_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly last_deployment_created_at?: string;
      readonly live_domain?: string;
      readonly live_url?: string;
      readonly live_url_base?: string;
      readonly owner_uuid?: string;
      pending_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
      readonly project_id?: string;
      region?: {
        readonly continent?: string;
        readonly data_centers?: Array<string>;
        /**
         * Whether or not the region is presented as the default.
         */
        readonly default?: boolean;
        readonly disabled?: boolean;
        readonly flag?: string;
        readonly label?: string;
        readonly reason?: string;
        readonly slug?: string;
      };
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      readonly tier_slug?: string;
      readonly updated_at?: string;
      pinned_deployment?: {
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      };
    };
  }> {
    return __request(this.client, {
      method: "PUT",
      url: "/v2/apps/{id}",
      path: {
        id: id,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve Active Deployment Logs
   * Retrieve the logs of the active deployment if one exists. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment. Note log_type=BUILD logs will return logs associated with the current active deployment (being served). To view build logs associated with in-progress build, the query must explicitly reference the deployment id.
   * @returns any A JSON object with urls that point to archived logs
   * @throws ApiError
   */
  public appsGetLogsActiveDeployment({
    appId,
    componentName,
    follow,
    type = "UNSPECIFIED",
    podConnectionTimeout,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * An optional component name. If set, logs will be limited to this component only.
     */
    componentName: string;
    /**
     * Whether the logs should follow live updates.
     */
    follow?: boolean;
    /**
     * The type of logs to retrieve
     * - BUILD: Build-time logs
     * - DEPLOY: Deploy-time logs
     * - RUN: Live run-time logs
     * - RUN_RESTARTED: Logs of crashed/restarted instances during runtime
     */
    type?: "UNSPECIFIED" | "BUILD" | "DEPLOY" | "RUN" | "RUN_RESTARTED";
    /**
     * An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.
     */
    podConnectionTimeout?: string;
  }): CancelablePromise<{
    historic_urls?: Array<string>;
    /**
     * A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
     */
    live_url?: string;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/components/{component_name}/logs",
      path: {
        app_id: appId,
        component_name: componentName,
      },
      query: {
        follow: follow,
        type: type,
        pod_connection_timeout: podConnectionTimeout,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * List App Deployments
   * List all deployments of an app.
   * @returns any A JSON object with a `deployments` key. This will be a list of all app deployments
   * @throws ApiError
   */
  public appsListDeployments({
    appId,
    page = 1,
    perPage = 20,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
  }): CancelablePromise<
    {
      deployments?: Array<{
        cause?: string;
        cloned_from?: string;
        created_at?: string;
        id?: string;
        jobs?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        functions?: Array<{
          name?: string;
          /**
           * The commit hash of the repository that was used to build this functions component.
           */
          source_commit_hash?: string;
          /**
           * The namespace where the functions are deployed.
           */
          namespace?: string;
        }>;
        phase?:
          | "UNKNOWN"
          | "PENDING_BUILD"
          | "BUILDING"
          | "PENDING_DEPLOY"
          | "DEPLOYING"
          | "ACTIVE"
          | "SUPERSEDED"
          | "ERROR"
          | "CANCELED";
        phase_last_updated_at?: string;
        progress?: {
          error_steps?: number;
          pending_steps?: number;
          running_steps?: number;
          steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          success_steps?: number;
          summary_steps?: Array<{
            component_name?: string;
            ended_at?: string;
            /**
             * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
             *
             * `message_base` = "Building service"
             * `component_name` = "api"
             */
            message_base?: string;
            name?: string;
            reason?: {
              code?: string;
              message?: string;
            };
            started_at?: string;
            status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
            steps?: Array<Record<string, any>>;
          }>;
          total_steps?: number;
        };
        services?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        /**
         * The desired configuration of an application.
         */
        spec?: {
          /**
           * The name of the app. Must be unique across all apps in the same account.
           */
          name: string;
          /**
           * The slug form of the geographical origin of the app. Default: `nearest available`
           */
          region?:
            | "ams"
            | "nyc"
            | "fra"
            | "sfo"
            | "sgp"
            | "blr"
            | "tor"
            | "lon"
            | "syd";
          /**
           * A set of hostnames where the application will be available.
           */
          domains?: Array<{
            /**
             * The hostname for the domain
             */
            domain: string;
            /**
             * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
             * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
             * - ALIAS: A non-primary domain
             */
            type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
            /**
             * Indicates whether the domain includes all sub-domains, in addition to the given domain
             */
            wildcard?: boolean;
            /**
             * Optional. If the domain uses DigitalOcean DNS and you would like App
             * Platform to automatically manage it for you, set this to the name of the
             * domain on your account.
             *
             * For example, If the domain you are adding is `app.domain.com`, the zone
             * could be `domain.com`.
             */
            zone?: string;
            /**
             * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
             */
            minimum_tls_version?: "1.2" | "1.3";
          }>;
          /**
           * Workloads which expose publicly-accessible HTTP services.
           */
          services?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              health_check?: {
                /**
                 * The number of failed health checks before considered unhealthy.
                 */
                failure_threshold?: number;
                /**
                 * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
                 */
                port?: number;
                /**
                 * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
                 */
                http_path?: string;
                /**
                 * The number of seconds to wait before beginning health checks.
                 */
                initial_delay_seconds?: number;
                /**
                 * The number of seconds to wait between health checks.
                 */
                period_seconds?: number;
                /**
                 * The number of successful health checks before considered healthy.
                 */
                success_threshold?: number;
                /**
                 * The number of seconds after which the check times out.
                 */
                timeout_seconds?: number;
              };
              /**
               * The internal port on which this service's run command will listen. Default: 8080
               * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
               */
              http_port?: number;
              /**
               * The ports on which this service will listen for internal traffic.
               */
              internal_ports?: Array<number>;
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            }
          >;
          /**
           * Content which can be rendered to web assets.
           */
          static_sites?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The name of the index document to use when serving this site. Default: index.html
               */
              index_document?: string;
              /**
               * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
               */
              error_document?: string;
              /**
               * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
               */
              catchall_document?: string;
              /**
               * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
               */
              output_dir?: string;
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
               * @deprecated
               */
              routes?: Array<{
                /**
                 * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
                 */
                path?: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
                 */
                preserve_path_prefix?: boolean;
              }>;
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
           */
          jobs?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               * - POST_DEPLOY: Indicates a job that runs after an app deployment.
               * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
               */
              kind?:
                | "UNSPECIFIED"
                | "PRE_DEPLOY"
                | "POST_DEPLOY"
                | "FAILED_DEPLOY";
            }
          >;
          /**
           * Workloads which do not expose publicly-accessible HTTP services.
           */
          workers?: Array<
            {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name?: string;
              git?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
                 */
                repo_clone_url?: string;
              };
              github?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              gitlab?: {
                /**
                 * The name of the branch to use
                 */
                branch?: string;
                /**
                 * Whether to automatically deploy new commits made to the repo
                 */
                deploy_on_push?: boolean;
                /**
                 * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
                 */
                repo?: string;
              };
              image?: {
                /**
                 * The registry name. Must be left empty for the `DOCR` registry type.
                 */
                registry?: string;
                /**
                 * - DOCKER_HUB: The DockerHub container registry type.
                 * - DOCR: The DigitalOcean container registry type.
                 * - GHCR: The Github container registry type.
                 */
                registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
                /**
                 * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 * - "$username:$access_token" for registries of type `DOCKER_HUB`.
                 * - "$username:$access_token" for registries of type `GHCR`.
                 */
                registry_credentials?: string;
                /**
                 * The repository name.
                 */
                repository?: string;
                /**
                 * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
                 */
                tag?: string;
                /**
                 * The image digest. Cannot be specified if tag is provided.
                 */
                digest?: string;
                deploy_on_push?: {
                  /**
                   * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                   */
                  enabled?: boolean;
                };
              };
              /**
               * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
               */
              dockerfile_path?: string;
              /**
               * An optional build command to run while building this component from source.
               */
              build_command?: string;
              /**
               * An optional run command to override the component's default.
               */
              run_command?: string;
              /**
               * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
               */
              source_dir?: string;
              /**
               * A list of environment variables made available to the component.
               */
              envs?: Array<{
                /**
                 * The variable name
                 */
                key: string;
                /**
                 * - RUN_TIME: Made available only at run-time
                 * - BUILD_TIME: Made available only at build-time
                 * - RUN_AND_BUILD_TIME: Made available at both build and run-time
                 */
                scope?:
                  | "UNSET"
                  | "RUN_TIME"
                  | "BUILD_TIME"
                  | "RUN_AND_BUILD_TIME";
                /**
                 * - GENERAL: A plain-text environment variable
                 * - SECRET: A secret encrypted environment variable
                 */
                type?: "GENERAL" | "SECRET";
                /**
                 * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
                 */
                value?: string;
              }>;
              /**
               * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
               */
              environment_slug?: string;
              log_destinations?: {
                name: string;
                /**
                 * Papertrail configuration.
                 */
                papertrail?: {
                  /**
                   * Papertrail syslog endpoint.
                   */
                  endpoint: string;
                };
                /**
                 * DataDog configuration.
                 */
                datadog?: {
                  /**
                   * Datadog HTTP log intake endpoint.
                   */
                  endpoint?: string;
                  /**
                   * Datadog API key.
                   */
                  api_key: string;
                };
                /**
                 * Logtail configuration.
                 */
                logtail?: {
                  /**
                   * Logtail token.
                   */
                  token?: string;
                };
              };
            } & {
              /**
               * The amount of instances that this component should be scaled to. Default: 1
               */
              instance_count?: number;
              /**
               * The instance size to use for this component. Default: `basic-xxs`
               */
              instance_size_slug?:
                | "basic-xxs"
                | "basic-xs"
                | "basic-s"
                | "basic-m"
                | "professional-xs"
                | "professional-s"
                | "professional-m"
                | "professional-1l"
                | "professional-l"
                | "professional-xl";
            } & {
              /**
               * The name. Must be unique across all components within the same app.
               */
              name: string;
            }
          >;
          /**
           * Workloads which expose publicly-accessible HTTP services via Functions Components.
           */
          functions?: Array<{
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            alerts?: Array<{
              rule?:
                | "UNSPECIFIED_RULE"
                | "CPU_UTILIZATION"
                | "MEM_UTILIZATION"
                | "RESTART_COUNT"
                | "DEPLOYMENT_FAILED"
                | "DEPLOYMENT_LIVE"
                | "DOMAIN_FAILED"
                | "DOMAIN_LIVE"
                | "FUNCTIONS_ACTIVATION_COUNT"
                | "FUNCTIONS_AVERAGE_DURATION_MS"
                | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
                | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
                | "FUNCTIONS_ERROR_COUNT"
                | "FUNCTIONS_GB_RATE_PER_SECOND";
              /**
               * Is the alert disabled?
               */
              disabled?: boolean;
              operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
              /**
               * Threshold value for alert
               */
              value?: number;
              window?:
                | "UNSPECIFIED_WINDOW"
                | "FIVE_MINUTES"
                | "TEN_MINUTES"
                | "THIRTY_MINUTES"
                | "ONE_HOUR";
            }>;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          }>;
          /**
           * Database instances which can provide persistence to workloads within the
           * application.
           */
          databases?: Array<{
            /**
             * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
             */
            cluster_name?: string;
            /**
             * The name of the MySQL or PostgreSQL database to configure.
             */
            db_name?: string;
            /**
             * The name of the MySQL or PostgreSQL user to configure.
             */
            db_user?: string;
            /**
             * - MYSQL: MySQL
             * - PG: PostgreSQL
             * - REDIS: Redis
             */
            engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
            /**
             * Whether this is a production or dev database.
             */
            production?: boolean;
            /**
             * The version of the database engine
             */
            version?: string;
          }>;
          /**
           * Specification for app ingress configurations.
           */
          ingress?: {
            /**
             * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
             */
            rules?: Array<{
              /**
               * The match configuration for the rule.
               */
              match?: {
                /**
                 * The path to match on.
                 */
                path: {
                  /**
                   * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                   */
                  prefix: string;
                };
              };
              cors?: {
                /**
                 * The set of allowed CORS origins.
                 */
                allow_origins?: Array<{
                  /**
                   * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  exact?: string;
                  /**
                   * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                   */
                  prefix?: string;
                  /**
                   * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                   */
                  regex?: string;
                }>;
                /**
                 * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
                 */
                allow_methods?: Array<string>;
                /**
                 * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
                 */
                allow_headers?: Array<string>;
                /**
                 * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
                 */
                expose_headers?: Array<string>;
                /**
                 * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
                 */
                max_age?: string;
                /**
                 * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
                 */
                allow_credentials?: boolean;
              };
              /**
               * The component to route to. Only one of `component` or `redirect` may be set.
               */
              component?: {
                /**
                 * The name of the component to route to.
                 */
                name: string;
                /**
                 * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
                 */
                preserve_path_prefix?: string;
                /**
                 * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
                 */
                rewrite?: string;
              };
              /**
               * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
               */
              redirect?: {
                /**
                 * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
                 */
                uri?: string;
                /**
                 * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
                 */
                authority?: string;
                /**
                 * The port to redirect to.
                 */
                port?: number;
                /**
                 * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
                 */
                scheme?: string;
                /**
                 * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
                 */
                redirect_code?: number;
              };
            }>;
          };
        };
        static_sites?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
        readonly tier_slug?: string;
        updated_at?: string;
        workers?: Array<{
          name?: string;
          source_commit_hash?: string;
        }>;
      }>;
    } & {
      links?: {
        pages?:
          | ({
              /**
               * URI of the last page of the results.
               */
              last?: string;
            } & {
              /**
               * URI of the next page of the results.
               */
              next?: string;
            })
          | ({
              /**
               * URI of the first page of the results.
               */
              first?: string;
            } & {
              /**
               * URI of the previous page of the results.
               */
              prev?: string;
            });
      };
    } & {
      meta: {
        /**
         * Number of objects returned by the request.
         */
        total?: number;
      };
    }
  > {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/deployments",
      path: {
        app_id: appId,
      },
      query: {
        page: page,
        per_page: perPage,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Create an App Deployment
   * Creating an app deployment will pull the latest changes from your repository and schedule a new deployment for your app.
   * @returns any A JSON object with a `deployment` key.
   * @throws ApiError
   */
  public appsCreateDeployment({
    appId,
    requestBody,
  }: {
    /**
     * The app ID
     */
    appId: string;
    requestBody: {
      force_build?: boolean;
    };
  }): CancelablePromise<{
    deployment?: {
      cause?: string;
      cloned_from?: string;
      created_at?: string;
      id?: string;
      jobs?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      functions?: Array<{
        name?: string;
        /**
         * The commit hash of the repository that was used to build this functions component.
         */
        source_commit_hash?: string;
        /**
         * The namespace where the functions are deployed.
         */
        namespace?: string;
      }>;
      phase?:
        | "UNKNOWN"
        | "PENDING_BUILD"
        | "BUILDING"
        | "PENDING_DEPLOY"
        | "DEPLOYING"
        | "ACTIVE"
        | "SUPERSEDED"
        | "ERROR"
        | "CANCELED";
      phase_last_updated_at?: string;
      progress?: {
        error_steps?: number;
        pending_steps?: number;
        running_steps?: number;
        steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        success_steps?: number;
        summary_steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        total_steps?: number;
      };
      services?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      /**
       * The desired configuration of an application.
       */
      spec?: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      static_sites?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      readonly tier_slug?: string;
      updated_at?: string;
      workers?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/deployments",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve an App Deployment
   * Retrieve information about an app deployment.
   * @returns any A JSON of the requested deployment
   * @throws ApiError
   */
  public appsGetDeployment({
    appId,
    deploymentId,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * The deployment ID
     */
    deploymentId: string;
  }): CancelablePromise<{
    deployment?: {
      cause?: string;
      cloned_from?: string;
      created_at?: string;
      id?: string;
      jobs?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      functions?: Array<{
        name?: string;
        /**
         * The commit hash of the repository that was used to build this functions component.
         */
        source_commit_hash?: string;
        /**
         * The namespace where the functions are deployed.
         */
        namespace?: string;
      }>;
      phase?:
        | "UNKNOWN"
        | "PENDING_BUILD"
        | "BUILDING"
        | "PENDING_DEPLOY"
        | "DEPLOYING"
        | "ACTIVE"
        | "SUPERSEDED"
        | "ERROR"
        | "CANCELED";
      phase_last_updated_at?: string;
      progress?: {
        error_steps?: number;
        pending_steps?: number;
        running_steps?: number;
        steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        success_steps?: number;
        summary_steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        total_steps?: number;
      };
      services?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      /**
       * The desired configuration of an application.
       */
      spec?: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      static_sites?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      readonly tier_slug?: string;
      updated_at?: string;
      workers?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
    };
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/deployments/{deployment_id}",
      path: {
        app_id: appId,
        deployment_id: deploymentId,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Cancel a Deployment
   * Immediately cancel an in-progress deployment.
   * @returns any A JSON the `deployment` that was just cancelled.
   * @throws ApiError
   */
  public appsCancelDeployment({
    appId,
    deploymentId,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * The deployment ID
     */
    deploymentId: string;
  }): CancelablePromise<{
    deployment?: {
      cause?: string;
      cloned_from?: string;
      created_at?: string;
      id?: string;
      jobs?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      functions?: Array<{
        name?: string;
        /**
         * The commit hash of the repository that was used to build this functions component.
         */
        source_commit_hash?: string;
        /**
         * The namespace where the functions are deployed.
         */
        namespace?: string;
      }>;
      phase?:
        | "UNKNOWN"
        | "PENDING_BUILD"
        | "BUILDING"
        | "PENDING_DEPLOY"
        | "DEPLOYING"
        | "ACTIVE"
        | "SUPERSEDED"
        | "ERROR"
        | "CANCELED";
      phase_last_updated_at?: string;
      progress?: {
        error_steps?: number;
        pending_steps?: number;
        running_steps?: number;
        steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        success_steps?: number;
        summary_steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        total_steps?: number;
      };
      services?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      /**
       * The desired configuration of an application.
       */
      spec?: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      static_sites?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      readonly tier_slug?: string;
      updated_at?: string;
      workers?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/deployments/{deployment_id}/cancel",
      path: {
        app_id: appId,
        deployment_id: deploymentId,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve Deployment Logs
   * Retrieve the logs of a past, in-progress, or active deployment. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.
   * @returns any A JSON object with urls that point to archived logs
   * @throws ApiError
   */
  public appsGetLogs({
    appId,
    deploymentId,
    componentName,
    follow,
    type = "UNSPECIFIED",
    podConnectionTimeout,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * The deployment ID
     */
    deploymentId: string;
    /**
     * An optional component name. If set, logs will be limited to this component only.
     */
    componentName: string;
    /**
     * Whether the logs should follow live updates.
     */
    follow?: boolean;
    /**
     * The type of logs to retrieve
     * - BUILD: Build-time logs
     * - DEPLOY: Deploy-time logs
     * - RUN: Live run-time logs
     * - RUN_RESTARTED: Logs of crashed/restarted instances during runtime
     */
    type?: "UNSPECIFIED" | "BUILD" | "DEPLOY" | "RUN" | "RUN_RESTARTED";
    /**
     * An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.
     */
    podConnectionTimeout?: string;
  }): CancelablePromise<{
    historic_urls?: Array<string>;
    /**
     * A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
     */
    live_url?: string;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/logs",
      path: {
        app_id: appId,
        deployment_id: deploymentId,
        component_name: componentName,
      },
      query: {
        follow: follow,
        type: type,
        pod_connection_timeout: podConnectionTimeout,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve Aggregate Deployment Logs
   * Retrieve the logs of a past, in-progress, or active deployment. If a component name is specified, the logs will be limited to only that component. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.
   * @returns any A JSON object with urls that point to archived logs
   * @throws ApiError
   */
  public appsGetLogsAggregate({
    appId,
    deploymentId,
    follow,
    type = "UNSPECIFIED",
    podConnectionTimeout,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * The deployment ID
     */
    deploymentId: string;
    /**
     * Whether the logs should follow live updates.
     */
    follow?: boolean;
    /**
     * The type of logs to retrieve
     * - BUILD: Build-time logs
     * - DEPLOY: Deploy-time logs
     * - RUN: Live run-time logs
     * - RUN_RESTARTED: Logs of crashed/restarted instances during runtime
     */
    type?: "UNSPECIFIED" | "BUILD" | "DEPLOY" | "RUN" | "RUN_RESTARTED";
    /**
     * An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.
     */
    podConnectionTimeout?: string;
  }): CancelablePromise<{
    historic_urls?: Array<string>;
    /**
     * A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
     */
    live_url?: string;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/deployments/{deployment_id}/logs",
      path: {
        app_id: appId,
        deployment_id: deploymentId,
      },
      query: {
        follow: follow,
        type: type,
        pod_connection_timeout: podConnectionTimeout,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve Active Deployment Aggregate Logs
   * Retrieve the logs of the active deployment if one exists. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment. Note log_type=BUILD logs will return logs associated with the current active deployment (being served). To view build logs associated with in-progress build, the query must explicitly reference the deployment id.
   * @returns any A JSON object with urls that point to archived logs
   * @throws ApiError
   */
  public appsGetLogsActiveDeploymentAggregate({
    appId,
    follow,
    type = "UNSPECIFIED",
    podConnectionTimeout,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * Whether the logs should follow live updates.
     */
    follow?: boolean;
    /**
     * The type of logs to retrieve
     * - BUILD: Build-time logs
     * - DEPLOY: Deploy-time logs
     * - RUN: Live run-time logs
     * - RUN_RESTARTED: Logs of crashed/restarted instances during runtime
     */
    type?: "UNSPECIFIED" | "BUILD" | "DEPLOY" | "RUN" | "RUN_RESTARTED";
    /**
     * An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.
     */
    podConnectionTimeout?: string;
  }): CancelablePromise<{
    historic_urls?: Array<string>;
    /**
     * A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
     */
    live_url?: string;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/logs",
      path: {
        app_id: appId,
      },
      query: {
        follow: follow,
        type: type,
        pod_connection_timeout: podConnectionTimeout,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * List App Tiers
   * List all app tiers.
   * @returns any A JSON object with a `tiers` key. This will be a list of all app tiers
   * @throws ApiError
   */
  public appsListTiers(): CancelablePromise<{
    tiers?: Array<{
      build_seconds?: string;
      egress_bandwidth_bytes?: string;
      name?: string;
      slug?: string;
      storage_bytes?: string;
    }>;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/tiers",
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve an App Tier
   * Retrieve information about a specific app tier.
   * @returns any A JSON with the key `tier`
   * @throws ApiError
   */
  public appsGetTier({
    slug,
  }: {
    /**
     * The slug of the tier
     */
    slug: string;
  }): CancelablePromise<{
    tier?: {
      build_seconds?: string;
      egress_bandwidth_bytes?: string;
      name?: string;
      slug?: string;
      storage_bytes?: string;
    };
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/tiers/{slug}",
      path: {
        slug: slug,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * List Instance Sizes
   * List all instance sizes for `service`, `worker`, and `job` components.
   * @returns any A JSON with key `instance_sizes`
   * @throws ApiError
   */
  public appsListInstanceSizes(): CancelablePromise<{
    discount_percent?: number;
    instance_sizes?: Array<{
      cpu_type?: "UNSPECIFIED" | "SHARED" | "DEDICATED";
      cpus?: string;
      memory_bytes?: string;
      name?: string;
      slug?: string;
      tier_downgrade_to?: string;
      tier_slug?: string;
      tier_upgrade_to?: string;
      usd_per_month?: string;
      usd_per_second?: string;
    }>;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/tiers/instance_sizes",
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve an Instance Size
   * Retrieve information about a specific instance size for `service`, `worker`, and `job` components.
   * @returns any A JSON with key `instance_size`
   * @throws ApiError
   */
  public appsGetInstanceSize({
    slug,
  }: {
    /**
     * The slug of the instance size
     */
    slug: string;
  }): CancelablePromise<{
    instance_size?: {
      cpu_type?: "UNSPECIFIED" | "SHARED" | "DEDICATED";
      cpus?: string;
      memory_bytes?: string;
      name?: string;
      slug?: string;
      tier_downgrade_to?: string;
      tier_slug?: string;
      tier_upgrade_to?: string;
      usd_per_month?: string;
      usd_per_second?: string;
    };
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/tiers/instance_sizes/{slug}",
      path: {
        slug: slug,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * List App Regions
   * List all regions supported by App Platform.
   * @returns any A JSON object with key `regions`
   * @throws ApiError
   */
  public appsListRegions(): CancelablePromise<{
    regions?: Array<{
      readonly continent?: string;
      readonly data_centers?: Array<string>;
      /**
       * Whether or not the region is presented as the default.
       */
      readonly default?: boolean;
      readonly disabled?: boolean;
      readonly flag?: string;
      readonly label?: string;
      readonly reason?: string;
      readonly slug?: string;
    }>;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/regions",
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Propose an App Spec
   * To propose and validate a spec for a new or existing app, send a POST request to the `/v2/apps/propose` endpoint. The request returns some information about the proposed app, including app cost and upgrade cost. If an existing app ID is specified, the app spec is treated as a proposed update to the existing app.
   * @returns any A JSON object.
   * @throws ApiError
   */
  public appsValidateAppSpec({
    requestBody,
  }: {
    requestBody: {
      /**
       * The desired configuration of an application.
       */
      spec: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      /**
       * An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
       */
      app_id?: string;
    };
  }): CancelablePromise<{
    /**
     * Indicates whether the app is a app.
     */
    app_is_static?: boolean;
    /**
     * Indicates whether the app name is available.
     */
    app_name_available?: boolean;
    /**
     * The suggested name if the proposed app name is unavailable.
     */
    app_name_suggestion?: string;
    /**
     * The maximum number of free apps the account can have. We will charge you for any additional apps.
     */
    existing_static_apps?: string;
    /**
     * The desired configuration of an application.
     */
    spec?: {
      /**
       * The name of the app. Must be unique across all apps in the same account.
       */
      name: string;
      /**
       * The slug form of the geographical origin of the app. Default: `nearest available`
       */
      region?:
        | "ams"
        | "nyc"
        | "fra"
        | "sfo"
        | "sgp"
        | "blr"
        | "tor"
        | "lon"
        | "syd";
      /**
       * A set of hostnames where the application will be available.
       */
      domains?: Array<{
        /**
         * The hostname for the domain
         */
        domain: string;
        /**
         * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
         * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
         * - ALIAS: A non-primary domain
         */
        type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
        /**
         * Indicates whether the domain includes all sub-domains, in addition to the given domain
         */
        wildcard?: boolean;
        /**
         * Optional. If the domain uses DigitalOcean DNS and you would like App
         * Platform to automatically manage it for you, set this to the name of the
         * domain on your account.
         *
         * For example, If the domain you are adding is `app.domain.com`, the zone
         * could be `domain.com`.
         */
        zone?: string;
        /**
         * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
         */
        minimum_tls_version?: "1.2" | "1.3";
      }>;
      /**
       * Workloads which expose publicly-accessible HTTP services.
       */
      services?: Array<
        {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name?: string;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          image?: {
            /**
             * The registry name. Must be left empty for the `DOCR` registry type.
             */
            registry?: string;
            /**
             * - DOCKER_HUB: The DockerHub container registry type.
             * - DOCR: The DigitalOcean container registry type.
             * - GHCR: The Github container registry type.
             */
            registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
            /**
             * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             * - "$username:$access_token" for registries of type `DOCKER_HUB`.
             * - "$username:$access_token" for registries of type `GHCR`.
             */
            registry_credentials?: string;
            /**
             * The repository name.
             */
            repository?: string;
            /**
             * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
             */
            tag?: string;
            /**
             * The image digest. Cannot be specified if tag is provided.
             */
            digest?: string;
            deploy_on_push?: {
              /**
               * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
               */
              enabled?: boolean;
            };
          };
          /**
           * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
           */
          dockerfile_path?: string;
          /**
           * An optional build command to run while building this component from source.
           */
          build_command?: string;
          /**
           * An optional run command to override the component's default.
           */
          run_command?: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          /**
           * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
           */
          environment_slug?: string;
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        } & {
          /**
           * The amount of instances that this component should be scaled to. Default: 1
           */
          instance_count?: number;
          /**
           * The instance size to use for this component. Default: `basic-xxs`
           */
          instance_size_slug?:
            | "basic-xxs"
            | "basic-xs"
            | "basic-s"
            | "basic-m"
            | "professional-xs"
            | "professional-s"
            | "professional-m"
            | "professional-1l"
            | "professional-l"
            | "professional-xl";
        } & {
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          health_check?: {
            /**
             * The number of failed health checks before considered unhealthy.
             */
            failure_threshold?: number;
            /**
             * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
             */
            port?: number;
            /**
             * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
             */
            http_path?: string;
            /**
             * The number of seconds to wait before beginning health checks.
             */
            initial_delay_seconds?: number;
            /**
             * The number of seconds to wait between health checks.
             */
            period_seconds?: number;
            /**
             * The number of successful health checks before considered healthy.
             */
            success_threshold?: number;
            /**
             * The number of seconds after which the check times out.
             */
            timeout_seconds?: number;
          };
          /**
           * The internal port on which this service's run command will listen. Default: 8080
           * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
           */
          http_port?: number;
          /**
           * The ports on which this service will listen for internal traffic.
           */
          internal_ports?: Array<number>;
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
        }
      >;
      /**
       * Content which can be rendered to web assets.
       */
      static_sites?: Array<
        {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name?: string;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          image?: {
            /**
             * The registry name. Must be left empty for the `DOCR` registry type.
             */
            registry?: string;
            /**
             * - DOCKER_HUB: The DockerHub container registry type.
             * - DOCR: The DigitalOcean container registry type.
             * - GHCR: The Github container registry type.
             */
            registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
            /**
             * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             * - "$username:$access_token" for registries of type `DOCKER_HUB`.
             * - "$username:$access_token" for registries of type `GHCR`.
             */
            registry_credentials?: string;
            /**
             * The repository name.
             */
            repository?: string;
            /**
             * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
             */
            tag?: string;
            /**
             * The image digest. Cannot be specified if tag is provided.
             */
            digest?: string;
            deploy_on_push?: {
              /**
               * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
               */
              enabled?: boolean;
            };
          };
          /**
           * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
           */
          dockerfile_path?: string;
          /**
           * An optional build command to run while building this component from source.
           */
          build_command?: string;
          /**
           * An optional run command to override the component's default.
           */
          run_command?: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          /**
           * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
           */
          environment_slug?: string;
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        } & {
          /**
           * The name of the index document to use when serving this site. Default: index.html
           */
          index_document?: string;
          /**
           * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
           */
          error_document?: string;
          /**
           * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
           */
          catchall_document?: string;
          /**
           * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
           */
          output_dir?: string;
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
        } & {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
        }
      >;
      /**
       * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
       */
      jobs?: Array<
        {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name?: string;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          image?: {
            /**
             * The registry name. Must be left empty for the `DOCR` registry type.
             */
            registry?: string;
            /**
             * - DOCKER_HUB: The DockerHub container registry type.
             * - DOCR: The DigitalOcean container registry type.
             * - GHCR: The Github container registry type.
             */
            registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
            /**
             * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             * - "$username:$access_token" for registries of type `DOCKER_HUB`.
             * - "$username:$access_token" for registries of type `GHCR`.
             */
            registry_credentials?: string;
            /**
             * The repository name.
             */
            repository?: string;
            /**
             * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
             */
            tag?: string;
            /**
             * The image digest. Cannot be specified if tag is provided.
             */
            digest?: string;
            deploy_on_push?: {
              /**
               * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
               */
              enabled?: boolean;
            };
          };
          /**
           * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
           */
          dockerfile_path?: string;
          /**
           * An optional build command to run while building this component from source.
           */
          build_command?: string;
          /**
           * An optional run command to override the component's default.
           */
          run_command?: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          /**
           * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
           */
          environment_slug?: string;
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        } & {
          /**
           * The amount of instances that this component should be scaled to. Default: 1
           */
          instance_count?: number;
          /**
           * The instance size to use for this component. Default: `basic-xxs`
           */
          instance_size_slug?:
            | "basic-xxs"
            | "basic-xs"
            | "basic-s"
            | "basic-m"
            | "professional-xs"
            | "professional-s"
            | "professional-m"
            | "professional-1l"
            | "professional-l"
            | "professional-xl";
        } & {
          /**
           * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
           * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
           * - POST_DEPLOY: Indicates a job that runs after an app deployment.
           * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
           */
          kind?: "UNSPECIFIED" | "PRE_DEPLOY" | "POST_DEPLOY" | "FAILED_DEPLOY";
        }
      >;
      /**
       * Workloads which do not expose publicly-accessible HTTP services.
       */
      workers?: Array<
        {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name?: string;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          image?: {
            /**
             * The registry name. Must be left empty for the `DOCR` registry type.
             */
            registry?: string;
            /**
             * - DOCKER_HUB: The DockerHub container registry type.
             * - DOCR: The DigitalOcean container registry type.
             * - GHCR: The Github container registry type.
             */
            registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
            /**
             * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             * - "$username:$access_token" for registries of type `DOCKER_HUB`.
             * - "$username:$access_token" for registries of type `GHCR`.
             */
            registry_credentials?: string;
            /**
             * The repository name.
             */
            repository?: string;
            /**
             * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
             */
            tag?: string;
            /**
             * The image digest. Cannot be specified if tag is provided.
             */
            digest?: string;
            deploy_on_push?: {
              /**
               * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
               */
              enabled?: boolean;
            };
          };
          /**
           * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
           */
          dockerfile_path?: string;
          /**
           * An optional build command to run while building this component from source.
           */
          build_command?: string;
          /**
           * An optional run command to override the component's default.
           */
          run_command?: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          /**
           * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
           */
          environment_slug?: string;
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        } & {
          /**
           * The amount of instances that this component should be scaled to. Default: 1
           */
          instance_count?: number;
          /**
           * The instance size to use for this component. Default: `basic-xxs`
           */
          instance_size_slug?:
            | "basic-xxs"
            | "basic-xs"
            | "basic-s"
            | "basic-m"
            | "professional-xs"
            | "professional-s"
            | "professional-m"
            | "professional-1l"
            | "professional-l"
            | "professional-xl";
        } & {
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
        }
      >;
      /**
       * Workloads which expose publicly-accessible HTTP services via Functions Components.
       */
      functions?: Array<{
        cors?: {
          /**
           * The set of allowed CORS origins.
           */
          allow_origins?: Array<{
            /**
             * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
             */
            exact?: string;
            /**
             * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
             */
            prefix?: string;
            /**
             * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
             */
            regex?: string;
          }>;
          /**
           * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
           */
          allow_methods?: Array<string>;
          /**
           * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
           */
          allow_headers?: Array<string>;
          /**
           * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
           */
          expose_headers?: Array<string>;
          /**
           * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
           */
          max_age?: string;
          /**
           * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
           */
          allow_credentials?: boolean;
        };
        /**
         * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
         * @deprecated
         */
        routes?: Array<{
          /**
           * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
           */
          path?: string;
          /**
           * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
           */
          preserve_path_prefix?: boolean;
        }>;
        /**
         * The name. Must be unique across all components within the same app.
         */
        name: string;
        /**
         * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
         */
        source_dir?: string;
        alerts?: Array<{
          rule?:
            | "UNSPECIFIED_RULE"
            | "CPU_UTILIZATION"
            | "MEM_UTILIZATION"
            | "RESTART_COUNT"
            | "DEPLOYMENT_FAILED"
            | "DEPLOYMENT_LIVE"
            | "DOMAIN_FAILED"
            | "DOMAIN_LIVE"
            | "FUNCTIONS_ACTIVATION_COUNT"
            | "FUNCTIONS_AVERAGE_DURATION_MS"
            | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
            | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
            | "FUNCTIONS_ERROR_COUNT"
            | "FUNCTIONS_GB_RATE_PER_SECOND";
          /**
           * Is the alert disabled?
           */
          disabled?: boolean;
          operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
          /**
           * Threshold value for alert
           */
          value?: number;
          window?:
            | "UNSPECIFIED_WINDOW"
            | "FIVE_MINUTES"
            | "TEN_MINUTES"
            | "THIRTY_MINUTES"
            | "ONE_HOUR";
        }>;
        /**
         * A list of environment variables made available to the component.
         */
        envs?: Array<{
          /**
           * The variable name
           */
          key: string;
          /**
           * - RUN_TIME: Made available only at run-time
           * - BUILD_TIME: Made available only at build-time
           * - RUN_AND_BUILD_TIME: Made available at both build and run-time
           */
          scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
          /**
           * - GENERAL: A plain-text environment variable
           * - SECRET: A secret encrypted environment variable
           */
          type?: "GENERAL" | "SECRET";
          /**
           * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
           */
          value?: string;
        }>;
        git?: {
          /**
           * The name of the branch to use
           */
          branch?: string;
          /**
           * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
           */
          repo_clone_url?: string;
        };
        github?: {
          /**
           * The name of the branch to use
           */
          branch?: string;
          /**
           * Whether to automatically deploy new commits made to the repo
           */
          deploy_on_push?: boolean;
          /**
           * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
           */
          repo?: string;
        };
        gitlab?: {
          /**
           * The name of the branch to use
           */
          branch?: string;
          /**
           * Whether to automatically deploy new commits made to the repo
           */
          deploy_on_push?: boolean;
          /**
           * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
           */
          repo?: string;
        };
        log_destinations?: {
          name: string;
          /**
           * Papertrail configuration.
           */
          papertrail?: {
            /**
             * Papertrail syslog endpoint.
             */
            endpoint: string;
          };
          /**
           * DataDog configuration.
           */
          datadog?: {
            /**
             * Datadog HTTP log intake endpoint.
             */
            endpoint?: string;
            /**
             * Datadog API key.
             */
            api_key: string;
          };
          /**
           * Logtail configuration.
           */
          logtail?: {
            /**
             * Logtail token.
             */
            token?: string;
          };
        };
      }>;
      /**
       * Database instances which can provide persistence to workloads within the
       * application.
       */
      databases?: Array<{
        /**
         * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
         */
        cluster_name?: string;
        /**
         * The name of the MySQL or PostgreSQL database to configure.
         */
        db_name?: string;
        /**
         * The name of the MySQL or PostgreSQL user to configure.
         */
        db_user?: string;
        /**
         * - MYSQL: MySQL
         * - PG: PostgreSQL
         * - REDIS: Redis
         */
        engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
        /**
         * The name. Must be unique across all components within the same app.
         */
        name: string;
        /**
         * Whether this is a production or dev database.
         */
        production?: boolean;
        /**
         * The version of the database engine
         */
        version?: string;
      }>;
      /**
       * Specification for app ingress configurations.
       */
      ingress?: {
        /**
         * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
         */
        rules?: Array<{
          /**
           * The match configuration for the rule.
           */
          match?: {
            /**
             * The path to match on.
             */
            path: {
              /**
               * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
               */
              prefix: string;
            };
          };
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * The component to route to. Only one of `component` or `redirect` may be set.
           */
          component?: {
            /**
             * The name of the component to route to.
             */
            name: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
             */
            preserve_path_prefix?: string;
            /**
             * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
             */
            rewrite?: string;
          };
          /**
           * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
           */
          redirect?: {
            /**
             * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
             */
            uri?: string;
            /**
             * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
             */
            authority?: string;
            /**
             * The port to redirect to.
             */
            port?: number;
            /**
             * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
             */
            scheme?: string;
            /**
             * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
             */
            redirect_code?: number;
          };
        }>;
      };
    };
    /**
     * The monthly cost of the proposed app in USD using the next pricing plan tier. For example, if you propose an app that uses the Basic tier, the `app_tier_upgrade_cost` field displays the monthly cost of the app if it were to use the Professional tier. If the proposed app already uses the most expensive tier, the field is empty.
     */
    app_cost?: number;
    /**
     * The monthly cost of the proposed app in USD using the previous pricing plan tier. For example, if you propose an app that uses the Professional tier, the `app_tier_downgrade_cost` field displays the monthly cost of the app if it were to use the Basic tier. If the proposed app already uses the lest expensive tier, the field is empty.
     */
    app_tier_downgrade_cost?: number;
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/propose",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * List all app alerts
   * List alerts associated to the app and any components. This includes configuration information about the alerts including emails, slack webhooks, and triggering events or conditions.
   * @returns any A JSON object with a `alerts` key. This is list of object `alerts`.
   * @throws ApiError
   */
  public appsListAlerts({
    appId,
  }: {
    /**
     * The app ID
     */
    appId: string;
  }): CancelablePromise<{
    alerts?: Array<{
      readonly id?: string;
      component_name?: string;
      spec?: {
        rule?:
          | "UNSPECIFIED_RULE"
          | "CPU_UTILIZATION"
          | "MEM_UTILIZATION"
          | "RESTART_COUNT"
          | "DEPLOYMENT_FAILED"
          | "DEPLOYMENT_LIVE"
          | "DOMAIN_FAILED"
          | "DOMAIN_LIVE"
          | "FUNCTIONS_ACTIVATION_COUNT"
          | "FUNCTIONS_AVERAGE_DURATION_MS"
          | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
          | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
          | "FUNCTIONS_ERROR_COUNT"
          | "FUNCTIONS_GB_RATE_PER_SECOND";
        /**
         * Is the alert disabled?
         */
        disabled?: boolean;
        operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
        /**
         * Threshold value for alert
         */
        value?: number;
        window?:
          | "UNSPECIFIED_WINDOW"
          | "FIVE_MINUTES"
          | "TEN_MINUTES"
          | "THIRTY_MINUTES"
          | "ONE_HOUR";
      };
      emails?: Array<string>;
      slack_webhooks?: Array<{
        url?: string;
        channel?: string;
      }>;
      phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
      progress?: {
        steps?: Array<{
          name?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          started_at?: string;
          ended_at?: string;
          reason?: {
            code?: string;
            message?: string;
          };
        }>;
      };
    }>;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/alerts",
      path: {
        app_id: appId,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Update destinations for alerts
   * Updates the emails and slack webhook destinations for app alerts. Emails must be associated to a user with access to the app.
   * @returns any A JSON object with an `alert` key. This is an object of type `alert`.
   * @throws ApiError
   */
  public appsAssignAlertDestinations({
    appId,
    alertId,
    requestBody,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * The alert ID
     */
    alertId: string;
    requestBody: {
      emails?: Array<string>;
      slack_webhooks?: Array<{
        url?: string;
        channel?: string;
      }>;
    };
  }): CancelablePromise<{
    alert?: {
      readonly id?: string;
      component_name?: string;
      spec?: {
        rule?:
          | "UNSPECIFIED_RULE"
          | "CPU_UTILIZATION"
          | "MEM_UTILIZATION"
          | "RESTART_COUNT"
          | "DEPLOYMENT_FAILED"
          | "DEPLOYMENT_LIVE"
          | "DOMAIN_FAILED"
          | "DOMAIN_LIVE"
          | "FUNCTIONS_ACTIVATION_COUNT"
          | "FUNCTIONS_AVERAGE_DURATION_MS"
          | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
          | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
          | "FUNCTIONS_ERROR_COUNT"
          | "FUNCTIONS_GB_RATE_PER_SECOND";
        /**
         * Is the alert disabled?
         */
        disabled?: boolean;
        operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
        /**
         * Threshold value for alert
         */
        value?: number;
        window?:
          | "UNSPECIFIED_WINDOW"
          | "FIVE_MINUTES"
          | "TEN_MINUTES"
          | "THIRTY_MINUTES"
          | "ONE_HOUR";
      };
      emails?: Array<string>;
      slack_webhooks?: Array<{
        url?: string;
        channel?: string;
      }>;
      phase?: "UNKNOWN" | "PENDING" | "CONFIGURING" | "ACTIVE" | "ERROR";
      progress?: {
        steps?: Array<{
          name?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          started_at?: string;
          ended_at?: string;
          reason?: {
            code?: string;
            message?: string;
          };
        }>;
      };
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/alerts/{alert_id}/destinations",
      path: {
        app_id: appId,
        alert_id: alertId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Rollback App
   * Rollback an app to a previous deployment. A new deployment will be created to perform the rollback.
   * The app will be pinned to the rollback deployment preventing any new deployments from being created,
   * either manually or through Auto Deploy on Push webhooks. To resume deployments, the rollback must be
   * either committed or reverted.
   *
   * It is recommended to use the Validate App Rollback endpoint to double check if the rollback is
   * valid and if there are any warnings.
   *
   * @returns any A JSON object with a `deployment` key.
   * @throws ApiError
   */
  public appsCreateRollback({
    appId,
    requestBody,
  }: {
    /**
     * The app ID
     */
    appId: string;
    requestBody: {
      /**
       * The ID of the deployment to rollback to.
       */
      deployment_id?: string;
      /**
       * Whether to skip pinning the rollback deployment. If false, the rollback deployment will be pinned and any new deployments including Auto Deploy on Push hooks will be disabled until the rollback is either manually committed or reverted via the CommitAppRollback or RevertAppRollback endpoints respectively. If true, the rollback will be immediately committed and the app will remain unpinned.
       */
      skip_pin?: boolean;
    };
  }): CancelablePromise<{
    deployment?: {
      cause?: string;
      cloned_from?: string;
      created_at?: string;
      id?: string;
      jobs?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      functions?: Array<{
        name?: string;
        /**
         * The commit hash of the repository that was used to build this functions component.
         */
        source_commit_hash?: string;
        /**
         * The namespace where the functions are deployed.
         */
        namespace?: string;
      }>;
      phase?:
        | "UNKNOWN"
        | "PENDING_BUILD"
        | "BUILDING"
        | "PENDING_DEPLOY"
        | "DEPLOYING"
        | "ACTIVE"
        | "SUPERSEDED"
        | "ERROR"
        | "CANCELED";
      phase_last_updated_at?: string;
      progress?: {
        error_steps?: number;
        pending_steps?: number;
        running_steps?: number;
        steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        success_steps?: number;
        summary_steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        total_steps?: number;
      };
      services?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      /**
       * The desired configuration of an application.
       */
      spec?: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      static_sites?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      readonly tier_slug?: string;
      updated_at?: string;
      workers?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/rollback",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Validate App Rollback
   * Check whether an app can be rolled back to a specific deployment. This endpoint can also be used
   * to check if there are any warnings or validation conditions that will cause the rollback to proceed
   * under unideal circumstances. For example, if a component must be rebuilt as part of the rollback
   * causing it to take longer than usual.
   *
   * @returns any A JSON object with the validation results.
   * @throws ApiError
   */
  public appsValidateRollback({
    appId,
    requestBody,
  }: {
    /**
     * The app ID
     */
    appId: string;
    requestBody: {
      /**
       * The ID of the deployment to rollback to.
       */
      deployment_id?: string;
      /**
       * Whether to skip pinning the rollback deployment. If false, the rollback deployment will be pinned and any new deployments including Auto Deploy on Push hooks will be disabled until the rollback is either manually committed or reverted via the CommitAppRollback or RevertAppRollback endpoints respectively. If true, the rollback will be immediately committed and the app will remain unpinned.
       */
      skip_pin?: boolean;
    };
  }): CancelablePromise<{
    /**
     * Indicates whether the app can be rolled back to the specified deployment.
     */
    valid?: boolean;
    error?: {
      /**
       * A code identifier that represents the failing condition.
       *
       * Failing conditions:
       * - `incompatible_phase` - indicates that the deployment's phase is not suitable for rollback.
       * - `incompatible_result` - indicates that the deployment's result is not suitable for rollback.
       * - `exceeded_revision_limit` - indicates that the app has exceeded the rollback revision limits for its tier.
       * - `app_pinned` - indicates that there is already a rollback in progress and the app is pinned.
       * - `database_config_conflict` - indicates that the deployment's database config is different than the current config.
       * - `region_conflict` - indicates that the deployment's region differs from the current app region.
       *
       * Warning conditions:
       * - `static_site_requires_rebuild` - indicates that the deployment contains at least one site that will require a rebuild.
       * - `image_source_missing_digest` - indicates that the deployment contains at least one component with an image source that is missing a digest.
       *
       */
      code?:
        | "incompatible_phase"
        | "incompatible_result"
        | "exceeded_revision_limit"
        | "app_pinned"
        | "database_config_conflict"
        | "region_conflict"
        | "static_site_requires_rebuild"
        | "image_source_missing_digest";
      /**
       * A human-readable message describing the failing condition.
       */
      message?: string;
      components?: Array<string>;
    };
    /**
     * Contains a list of warnings that may cause the rollback to run under unideal circumstances.
     */
    warnings?: Array<{
      /**
       * A code identifier that represents the failing condition.
       *
       * Failing conditions:
       * - `incompatible_phase` - indicates that the deployment's phase is not suitable for rollback.
       * - `incompatible_result` - indicates that the deployment's result is not suitable for rollback.
       * - `exceeded_revision_limit` - indicates that the app has exceeded the rollback revision limits for its tier.
       * - `app_pinned` - indicates that there is already a rollback in progress and the app is pinned.
       * - `database_config_conflict` - indicates that the deployment's database config is different than the current config.
       * - `region_conflict` - indicates that the deployment's region differs from the current app region.
       *
       * Warning conditions:
       * - `static_site_requires_rebuild` - indicates that the deployment contains at least one site that will require a rebuild.
       * - `image_source_missing_digest` - indicates that the deployment contains at least one component with an image source that is missing a digest.
       *
       */
      code?:
        | "incompatible_phase"
        | "incompatible_result"
        | "exceeded_revision_limit"
        | "app_pinned"
        | "database_config_conflict"
        | "region_conflict"
        | "static_site_requires_rebuild"
        | "image_source_missing_digest";
      /**
       * A human-readable message describing the failing condition.
       */
      message?: string;
      components?: Array<string>;
    }>;
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/rollback/validate",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Commit App Rollback
   * Commit an app rollback. This action permanently applies the rollback and unpins the app to resume new deployments.
   *
   * @returns string The action was successful and the response body is empty.
   * @returns any Unexpected error
   * @throws ApiError
   */
  public appsCommitRollback({
    appId,
  }: {
    /**
     * The app ID
     */
    appId: string;
  }): CancelablePromise<
    | string
    | {
        /**
         * A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be "not_found."
         */
        id: string;
        /**
         * A message providing additional information about the error, including  details to help resolve it when possible.
         */
        message: string;
        /**
         * Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.
         */
        request_id?: string;
      }
  > {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/rollback/commit",
      path: {
        app_id: appId,
      },
      responseHeader: "ratelimit-limit",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Revert App Rollback
   * Revert an app rollback. This action reverts the active rollback by creating a new deployment from the
   * latest app spec prior to the rollback and unpins the app to resume new deployments.
   *
   * @returns any A JSON object with a `deployment` key.
   * @throws ApiError
   */
  public appsRevertRollback({
    appId,
  }: {
    /**
     * The app ID
     */
    appId: string;
  }): CancelablePromise<{
    deployment?: {
      cause?: string;
      cloned_from?: string;
      created_at?: string;
      id?: string;
      jobs?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      functions?: Array<{
        name?: string;
        /**
         * The commit hash of the repository that was used to build this functions component.
         */
        source_commit_hash?: string;
        /**
         * The namespace where the functions are deployed.
         */
        namespace?: string;
      }>;
      phase?:
        | "UNKNOWN"
        | "PENDING_BUILD"
        | "BUILDING"
        | "PENDING_DEPLOY"
        | "DEPLOYING"
        | "ACTIVE"
        | "SUPERSEDED"
        | "ERROR"
        | "CANCELED";
      phase_last_updated_at?: string;
      progress?: {
        error_steps?: number;
        pending_steps?: number;
        running_steps?: number;
        steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        success_steps?: number;
        summary_steps?: Array<{
          component_name?: string;
          ended_at?: string;
          /**
           * The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:
           *
           * `message_base` = "Building service"
           * `component_name` = "api"
           */
          message_base?: string;
          name?: string;
          reason?: {
            code?: string;
            message?: string;
          };
          started_at?: string;
          status?: "UNKNOWN" | "PENDING" | "RUNNING" | "ERROR" | "SUCCESS";
          steps?: Array<Record<string, any>>;
        }>;
        total_steps?: number;
      };
      services?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      /**
       * The desired configuration of an application.
       */
      spec?: {
        /**
         * The name of the app. Must be unique across all apps in the same account.
         */
        name: string;
        /**
         * The slug form of the geographical origin of the app. Default: `nearest available`
         */
        region?:
          | "ams"
          | "nyc"
          | "fra"
          | "sfo"
          | "sgp"
          | "blr"
          | "tor"
          | "lon"
          | "syd";
        /**
         * A set of hostnames where the application will be available.
         */
        domains?: Array<{
          /**
           * The hostname for the domain
           */
          domain: string;
          /**
           * - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
           * - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
           * - ALIAS: A non-primary domain
           */
          type?: "UNSPECIFIED" | "DEFAULT" | "PRIMARY" | "ALIAS";
          /**
           * Indicates whether the domain includes all sub-domains, in addition to the given domain
           */
          wildcard?: boolean;
          /**
           * Optional. If the domain uses DigitalOcean DNS and you would like App
           * Platform to automatically manage it for you, set this to the name of the
           * domain on your account.
           *
           * For example, If the domain you are adding is `app.domain.com`, the zone
           * could be `domain.com`.
           */
          zone?: string;
          /**
           * The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
           */
          minimum_tls_version?: "1.2" | "1.3";
        }>;
        /**
         * Workloads which expose publicly-accessible HTTP services.
         */
        services?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            health_check?: {
              /**
               * The number of failed health checks before considered unhealthy.
               */
              failure_threshold?: number;
              /**
               * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
               */
              port?: number;
              /**
               * The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
               */
              http_path?: string;
              /**
               * The number of seconds to wait before beginning health checks.
               */
              initial_delay_seconds?: number;
              /**
               * The number of seconds to wait between health checks.
               */
              period_seconds?: number;
              /**
               * The number of successful health checks before considered healthy.
               */
              success_threshold?: number;
              /**
               * The number of seconds after which the check times out.
               */
              timeout_seconds?: number;
            };
            /**
             * The internal port on which this service's run command will listen. Default: 8080
             * If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
             */
            http_port?: number;
            /**
             * The ports on which this service will listen for internal traffic.
             */
            internal_ports?: Array<number>;
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          }
        >;
        /**
         * Content which can be rendered to web assets.
         */
        static_sites?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The name of the index document to use when serving this site. Default: index.html
             */
            index_document?: string;
            /**
             * The name of the error document to use when serving this site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
             */
            error_document?: string;
            /**
             * The name of the document to use as the fallback for any requests to documents that are not found when serving this site. Only 1 of `catchall_document` or `error_document` can be set.
             */
            catchall_document?: string;
            /**
             * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
             */
            output_dir?: string;
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
             * @deprecated
             */
            routes?: Array<{
              /**
               * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
               */
              path?: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
               */
              preserve_path_prefix?: boolean;
            }>;
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
         */
        jobs?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
             * - PRE_DEPLOY: Indicates a job that runs before an app deployment.
             * - POST_DEPLOY: Indicates a job that runs after an app deployment.
             * - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
             */
            kind?:
              | "UNSPECIFIED"
              | "PRE_DEPLOY"
              | "POST_DEPLOY"
              | "FAILED_DEPLOY";
          }
        >;
        /**
         * Workloads which do not expose publicly-accessible HTTP services.
         */
        workers?: Array<
          {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name?: string;
            git?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
               */
              repo_clone_url?: string;
            };
            github?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            gitlab?: {
              /**
               * The name of the branch to use
               */
              branch?: string;
              /**
               * Whether to automatically deploy new commits made to the repo
               */
              deploy_on_push?: boolean;
              /**
               * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
               */
              repo?: string;
            };
            image?: {
              /**
               * The registry name. Must be left empty for the `DOCR` registry type.
               */
              registry?: string;
              /**
               * - DOCKER_HUB: The DockerHub container registry type.
               * - DOCR: The DigitalOcean container registry type.
               * - GHCR: The Github container registry type.
               */
              registry_type?: "DOCKER_HUB" | "DOCR" | "GHCR";
              /**
               * The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               * - "$username:$access_token" for registries of type `DOCKER_HUB`.
               * - "$username:$access_token" for registries of type `GHCR`.
               */
              registry_credentials?: string;
              /**
               * The repository name.
               */
              repository?: string;
              /**
               * The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.
               */
              tag?: string;
              /**
               * The image digest. Cannot be specified if tag is provided.
               */
              digest?: string;
              deploy_on_push?: {
                /**
                 * Whether to automatically deploy new images. Can only be used for images hosted in DOCR and can only be used with an image tag, not a specific digest.
                 */
                enabled?: boolean;
              };
            };
            /**
             * The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
             */
            dockerfile_path?: string;
            /**
             * An optional build command to run while building this component from source.
             */
            build_command?: string;
            /**
             * An optional run command to override the component's default.
             */
            run_command?: string;
            /**
             * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
             */
            source_dir?: string;
            /**
             * A list of environment variables made available to the component.
             */
            envs?: Array<{
              /**
               * The variable name
               */
              key: string;
              /**
               * - RUN_TIME: Made available only at run-time
               * - BUILD_TIME: Made available only at build-time
               * - RUN_AND_BUILD_TIME: Made available at both build and run-time
               */
              scope?:
                | "UNSET"
                | "RUN_TIME"
                | "BUILD_TIME"
                | "RUN_AND_BUILD_TIME";
              /**
               * - GENERAL: A plain-text environment variable
               * - SECRET: A secret encrypted environment variable
               */
              type?: "GENERAL" | "SECRET";
              /**
               * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
               */
              value?: string;
            }>;
            /**
             * An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
             */
            environment_slug?: string;
            log_destinations?: {
              name: string;
              /**
               * Papertrail configuration.
               */
              papertrail?: {
                /**
                 * Papertrail syslog endpoint.
                 */
                endpoint: string;
              };
              /**
               * DataDog configuration.
               */
              datadog?: {
                /**
                 * Datadog HTTP log intake endpoint.
                 */
                endpoint?: string;
                /**
                 * Datadog API key.
                 */
                api_key: string;
              };
              /**
               * Logtail configuration.
               */
              logtail?: {
                /**
                 * Logtail token.
                 */
                token?: string;
              };
            };
          } & {
            /**
             * The amount of instances that this component should be scaled to. Default: 1
             */
            instance_count?: number;
            /**
             * The instance size to use for this component. Default: `basic-xxs`
             */
            instance_size_slug?:
              | "basic-xxs"
              | "basic-xs"
              | "basic-s"
              | "basic-m"
              | "professional-xs"
              | "professional-s"
              | "professional-m"
              | "professional-1l"
              | "professional-l"
              | "professional-xl";
          } & {
            /**
             * The name. Must be unique across all components within the same app.
             */
            name: string;
          }
        >;
        /**
         * Workloads which expose publicly-accessible HTTP services via Functions Components.
         */
        functions?: Array<{
          cors?: {
            /**
             * The set of allowed CORS origins.
             */
            allow_origins?: Array<{
              /**
               * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              exact?: string;
              /**
               * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
               */
              prefix?: string;
              /**
               * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
               */
              regex?: string;
            }>;
            /**
             * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
             */
            allow_methods?: Array<string>;
            /**
             * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
             */
            allow_headers?: Array<string>;
            /**
             * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
             */
            expose_headers?: Array<string>;
            /**
             * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
             */
            max_age?: string;
            /**
             * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
             */
            allow_credentials?: boolean;
          };
          /**
           * (Deprecated - Use Ingress Rules instead). A list of HTTP routes that should be routed to this component.
           * @deprecated
           */
          routes?: Array<{
            /**
             * (Deprecated - Use Ingress Rules instead). An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
             */
            path?: string;
            /**
             * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
             */
            preserve_path_prefix?: boolean;
          }>;
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
           */
          source_dir?: string;
          alerts?: Array<{
            rule?:
              | "UNSPECIFIED_RULE"
              | "CPU_UTILIZATION"
              | "MEM_UTILIZATION"
              | "RESTART_COUNT"
              | "DEPLOYMENT_FAILED"
              | "DEPLOYMENT_LIVE"
              | "DOMAIN_FAILED"
              | "DOMAIN_LIVE"
              | "FUNCTIONS_ACTIVATION_COUNT"
              | "FUNCTIONS_AVERAGE_DURATION_MS"
              | "FUNCTIONS_ERROR_RATE_PER_MINUTE"
              | "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
              | "FUNCTIONS_ERROR_COUNT"
              | "FUNCTIONS_GB_RATE_PER_SECOND";
            /**
             * Is the alert disabled?
             */
            disabled?: boolean;
            operator?: "UNSPECIFIED_OPERATOR" | "GREATER_THAN" | "LESS_THAN";
            /**
             * Threshold value for alert
             */
            value?: number;
            window?:
              | "UNSPECIFIED_WINDOW"
              | "FIVE_MINUTES"
              | "TEN_MINUTES"
              | "THIRTY_MINUTES"
              | "ONE_HOUR";
          }>;
          /**
           * A list of environment variables made available to the component.
           */
          envs?: Array<{
            /**
             * The variable name
             */
            key: string;
            /**
             * - RUN_TIME: Made available only at run-time
             * - BUILD_TIME: Made available only at build-time
             * - RUN_AND_BUILD_TIME: Made available at both build and run-time
             */
            scope?: "UNSET" | "RUN_TIME" | "BUILD_TIME" | "RUN_AND_BUILD_TIME";
            /**
             * - GENERAL: A plain-text environment variable
             * - SECRET: A secret encrypted environment variable
             */
            type?: "GENERAL" | "SECRET";
            /**
             * The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
             */
            value?: string;
          }>;
          git?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
             */
            repo_clone_url?: string;
          };
          github?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          gitlab?: {
            /**
             * The name of the branch to use
             */
            branch?: string;
            /**
             * Whether to automatically deploy new commits made to the repo
             */
            deploy_on_push?: boolean;
            /**
             * The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
             */
            repo?: string;
          };
          log_destinations?: {
            name: string;
            /**
             * Papertrail configuration.
             */
            papertrail?: {
              /**
               * Papertrail syslog endpoint.
               */
              endpoint: string;
            };
            /**
             * DataDog configuration.
             */
            datadog?: {
              /**
               * Datadog HTTP log intake endpoint.
               */
              endpoint?: string;
              /**
               * Datadog API key.
               */
              api_key: string;
            };
            /**
             * Logtail configuration.
             */
            logtail?: {
              /**
               * Logtail token.
               */
              token?: string;
            };
          };
        }>;
        /**
         * Database instances which can provide persistence to workloads within the
         * application.
         */
        databases?: Array<{
          /**
           * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
           */
          cluster_name?: string;
          /**
           * The name of the MySQL or PostgreSQL database to configure.
           */
          db_name?: string;
          /**
           * The name of the MySQL or PostgreSQL user to configure.
           */
          db_user?: string;
          /**
           * - MYSQL: MySQL
           * - PG: PostgreSQL
           * - REDIS: Redis
           */
          engine?: "UNSET" | "MYSQL" | "PG" | "REDIS";
          /**
           * The name. Must be unique across all components within the same app.
           */
          name: string;
          /**
           * Whether this is a production or dev database.
           */
          production?: boolean;
          /**
           * The version of the database engine
           */
          version?: string;
        }>;
        /**
         * Specification for app ingress configurations.
         */
        ingress?: {
          /**
           * Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
           */
          rules?: Array<{
            /**
             * The match configuration for the rule.
             */
            match?: {
              /**
               * The path to match on.
               */
              path: {
                /**
                 * Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
                 */
                prefix: string;
              };
            };
            cors?: {
              /**
               * The set of allowed CORS origins.
               */
              allow_origins?: Array<{
                /**
                 * Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                exact?: string;
                /**
                 * Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
                 */
                prefix?: string;
                /**
                 * RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
                 */
                regex?: string;
              }>;
              /**
               * The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
               */
              allow_methods?: Array<string>;
              /**
               * The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
               */
              allow_headers?: Array<string>;
              /**
               * The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
               */
              expose_headers?: Array<string>;
              /**
               * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
               */
              max_age?: string;
              /**
               * Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
               */
              allow_credentials?: boolean;
            };
            /**
             * The component to route to. Only one of `component` or `redirect` may be set.
             */
            component?: {
              /**
               * The name of the component to route to.
               */
              name: string;
              /**
               * An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
               */
              preserve_path_prefix?: string;
              /**
               * An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
               */
              rewrite?: string;
            };
            /**
             * The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
             */
            redirect?: {
              /**
               * An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
               */
              uri?: string;
              /**
               * The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
               */
              authority?: string;
              /**
               * The port to redirect to.
               */
              port?: number;
              /**
               * The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
               */
              scheme?: string;
              /**
               * The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
               */
              redirect_code?: number;
            };
          }>;
        };
      };
      static_sites?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
      readonly tier_slug?: string;
      updated_at?: string;
      workers?: Array<{
        name?: string;
        source_commit_hash?: string;
      }>;
    };
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/{app_id}/rollback/revert",
      path: {
        app_id: appId,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve App Daily Bandwidth Metrics
   * Retrieve daily bandwidth usage metrics for a single app.
   * @returns any A JSON object with a `app_bandwidth_usage` key
   * @throws ApiError
   */
  public appsGetMetricsBandwidthDaily({
    appId,
    date,
  }: {
    /**
     * The app ID
     */
    appId: string;
    /**
     * Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
     */
    date?: string;
  }): CancelablePromise<{
    /**
     * A list of bandwidth usage details by app.
     */
    app_bandwidth_usage?: Array<{
      /**
       * The ID of the app.
       */
      app_id?: string;
      /**
       * The used bandwidth amount in bytes.
       */
      bandwidth_bytes?: string;
    }>;
    /**
     * The date for the metrics data.
     */
    date?: string;
  }> {
    return __request(this.client, {
      method: "GET",
      url: "/v2/apps/{app_id}/metrics/bandwidth_daily",
      path: {
        app_id: appId,
      },
      query: {
        date: date,
      },
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }

  /**
   * Retrieve Multiple Apps' Daily Bandwidth Metrics
   * Retrieve daily bandwidth usage metrics for multiple apps.
   * @returns any A JSON object with a `app_bandwidth_usage` key
   * @throws ApiError
   */
  public appsListMetricsBandwidthDaily({
    requestBody,
  }: {
    requestBody: {
      /**
       * A list of app IDs to query bandwidth metrics for.
       */
      app_ids: Array<string>;
      /**
       * Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
       */
      date?: string;
    };
  }): CancelablePromise<{
    /**
     * A list of bandwidth usage details by app.
     */
    app_bandwidth_usage?: Array<{
      /**
       * The ID of the app.
       */
      app_id?: string;
      /**
       * The used bandwidth amount in bytes.
       */
      bandwidth_bytes?: string;
    }>;
    /**
     * The date for the metrics data.
     */
    date?: string;
  }> {
    return __request(this.client, {
      method: "POST",
      url: "/v2/apps/metrics/bandwidth_daily",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        401: `Unauthorized`,
        404: `The resource was not found.`,
        429: `API Rate limit exceeded`,
        500: `Server error.`,
      },
    });
  }
}
